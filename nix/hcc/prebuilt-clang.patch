diff -ruN a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	2018-03-30 14:21:18.855289382 -0400
+++ b/CMakeLists.txt	2018-03-30 14:24:04.740286633 -0400
@@ -310,77 +310,10 @@
 set(LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR "${PROJECT_SOURCE_DIR}/compiler-rt")
 set(LLVM_EXTERNAL_LLD_SOURCE_DIR "${PROJECT_SOURCE_DIR}/lld")
 
-# determine LLVM targets to be built
-# AMDGPU is always on
-# For host target, x86_64, aarch64, ppc64, ppc64le are currently supported
-if (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")
-  set(LLVM_HOST_TARGET "X86")
-elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "aarch64")
-  set(LLVM_HOST_TARGET "AArch64")
-elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "ppc64")
-  set(LLVM_HOST_TARGET "PowerPC")
-elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "ppc64le")
-  set(LLVM_HOST_TARGET "PowerPC")
-endif()
-set(LLVM_TARGETS_TO_BUILD "AMDGPU" ${LLVM_HOST_TARGET} CACHE STRING "" FORCE)
-set(LLVM_INSTALL_TOOLCHAIN_ONLY ON CACHE BOOL "" FORCE)
-
-if(EXISTS ${PROJECT_SOURCE_DIR}/clang-tools-extra/CMakeLists.txt)
-  set(LLVM_EXTERNAL_CLANG_TOOLS_EXTRA_SOURCE_DIR "${PROJECT_SOURCE_DIR}/clang-tools-extra")
-endif()
-
-add_subdirectory(${CLANG_SRC_DIR})
-
-install(PROGRAMS $<TARGET_FILE:llvm-as>
-                 $<TARGET_FILE:llvm-dis>
-                 $<TARGET_FILE:llvm-link>
-                 $<TARGET_FILE:llvm-objdump>
-                 $<TARGET_FILE:llvm-mc>
-                 $<TARGET_FILE:opt>
-                 $<TARGET_FILE:llc>
-        DESTINATION bin
-        COMPONENT compiler)
-
-add_custom_target(clang_links DEPENDS clang)
-if (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "ppc64le")
-  set(RT_BUILTIN_SUFFIX "powerpc64le")
-else()
-  set(RT_BUILTIN_SUFFIX ${CMAKE_SYSTEM_PROCESSOR})
-endif()
-add_custom_command(TARGET clang_links POST_BUILD
-  COMMAND ${CMAKE_COMMAND} -E create_symlink ${CLANG_BIN_DIR}/lib/clang/6.0.0/lib/linux/libclang_rt.builtins-${RT_BUILTIN_SUFFIX}.a ${PROJECT_BINARY_DIR}/lib/libclang_rt.builtins-${RT_BUILTIN_SUFFIX}.a
-  COMMAND ${CMAKE_COMMAND} -E create_symlink ${CLANG_BIN_DIR}/bin/clang ${PROJECT_BINARY_DIR}/bin/clang
-  COMMAND ${CMAKE_COMMAND} -E create_symlink ${CLANG_BIN_DIR}/bin/clang++ ${PROJECT_BINARY_DIR}/bin/clang++
-  COMMAND ${CMAKE_COMMAND} -E create_symlink ${CLANG_BIN_DIR}/bin/hcc ${PROJECT_BINARY_DIR}/bin/hcc
-)
-
-# install certain LLVM libraries needed by HIP
-install(PROGRAMS $<TARGET_FILE:LLVMAMDGPUDesc>
-                 $<TARGET_FILE:LLVMAMDGPUUtils>
-                 $<TARGET_FILE:LLVMMC>
-                 $<TARGET_FILE:LLVMCore>
-                 $<TARGET_FILE:LLVMSupport>
-                 $<TARGET_FILE:LLVMCpuRename>
-                 $<TARGET_FILE:LLVMDirectFuncCall>
-                 $<TARGET_FILE:LLVMSelectAcceleratorCode>
-                 $<TARGET_FILE:LLVMHello>
-                 $<TARGET_FILE:LLVMTileUniform>
-                 $<TARGET_FILE:LLVMWrapperGen>
-        DESTINATION lib
-        COMPONENT compiler
-)
-
 # force library install path to lib
 set(CMAKE_INSTALL_LIBDIR "lib" CACHE INTERNAL "Installation directory for libraries" FORCE)
 
-install(FILES ${CLANG_BIN_DIR}/lib/clang/6.0.0/lib/linux/libclang_rt.builtins-${RT_BUILTIN_SUFFIX}.a
-        DESTINATION  ${CMAKE_INSTALL_LIBDIR}
-        COMPONENT compiler)
-
-install( FILES ${CMAKE_CURRENT_SOURCE_DIR}/scripts/cmake/ImportedTargets.cmake
-         DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/hcc )
-
-add_custom_target(world DEPENDS clang_links)
+add_custom_target(world)
 
 # move headers to build dir before building rocdl and hcc lib
 add_subdirectory(include)
@@ -475,7 +408,6 @@
 add_subdirectory(tests)
 add_subdirectory(amp-conformance)
 add_subdirectory(stl-test)
-add_subdirectory(cmake-tests)
 
 # create documentation
 configure_file(
