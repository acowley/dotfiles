(require 'package)
(setq package-quickstart t)

;; This can fix some troubles with native compilation
;; (setq load-no-native t)

;;; Before everything else
;; (defvar old--file-name-handler-alist file-name-handler-alist)

(setq file-name-handler-alist nil)

;; (add-hook 'emacs-startup-hook
;;           #'(lambda () (setq ;; gc-cons-threshold 16777216 ; 16mb
;;                              gc-cons-threshold 104857600 ; 100MB
;;                              gc-cons-percentage 0.1
;;                              file-name-handler-alist old--file-name-handler-alist)
;;               ;; (my/set-font)
;;               ))

;;; Package setup

; If we run package-initialize, then add-to-list melpa, the
; package-install invocation will fail. We need the package-archives
; list setup before calling package-initialize.
(setq package-archives '(("org" . "http://orgmode.org/elpa/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")
                         ("gnu" . "http://elpa.gnu.org/packages/")))

;; (package-initialize)

(require 'use-package)
;; (eval-when-compile
;;   (add-to-list 'load-path "~/src/use-package")
;;   (require 'use-package))
;; (require 'bind-key)

;; Show a message whenever a package takes longer than 0.1s to load
(setq use-package-verbose t)
(setq use-package-compute-statistics t)

;;; benchmark-init
(use-package benchmark-init
  :disabled
  :config
  (require 'benchmark-init)
  ;; To disable collection of benchmark data after init is done.
  (add-hook 'after-init-hook (lambda ()
                               (benchmark-init/deactivate)
                               (require 'benchmark-init-modes)))
  (benchmark-init/activate))
;;; Font setup
;; It would be nice to include this logic in early-init.el, but
;; `window-system' is not set up by the time that file is run during
;; emacs startup.
(defun my/preferred-font-size ()
  (cond 
   ((memq window-system '(mac ns)) 15)
   ((file-exists-p "/etc/nixos") 11)
   ((file-exists-p "/etc/lsb-release") 18)
   (t 11)))

(defun my/set-font ()
  (if (and nil (memq window-system '(mac ns)))
      (set-frame-font "Monaco 14" nil t)
    (let ((size (my/preferred-font-size)))
      (set-face-font 'default (format "Victor Mono-%d:weight=demi" size))
      (set-frame-font (format "Victor Mono-%d:weight=demi" size) nil t))
    ;; (if (or (memq window-system '(mac ns))
    ;;         ;; (file-exists-p "/etc/lsb-release")
    ;;         )
    ;;     (set-frame-font "Victor Mono-15:weight=demi")
    ;;   (set-frame-font "Victor Mono-11:weight=demi"))
    ))
(my/set-font)

(defvar yanone-font-name "Yanone Kaffeesatz")

(use-package info
  :commands (info info-apropos)
  :config
  ;; (set-face-attribute 'info-title-1 nil :family "Yanone Kaffeesatz" :weight 'light :height 200 :foreground "#E1BEE7")
  ;; (set-face-attribute 'info-title-2 nil :family "Yanone Kaffeesatz" :weight 'light :height 175)
  ;; (set-face-attribute 'info-title-3 nil :family "Yanone Kaffeesatz" :weight 'light :height 160)
  ;; (set-face-attribute 'info-title-4 nil :family "Yanone Kaffeesatz" :weight 'light :height 150)
  ;; (set-face-attribute 'info-menu-header nil :family "Yanone Kaffeesatz" :weight 'light :height 175 :foreground "#E1BEE7")

  (set-face-attribute 'info-title-1 nil :font yanone-font-name :weight 'light :height 200 :foreground "#E1BEE7")
  (set-face-attribute 'info-title-2 nil :font yanone-font-name :weight 'light :height 175)
  (set-face-attribute 'info-title-3 nil :font yanone-font-name :weight 'light :height 160)
  (set-face-attribute 'info-title-4 nil :font yanone-font-name :weight 'light :height 150)
  (set-face-attribute 'info-menu-header nil :font yanone-font-name :weight 'light :height 175 :foreground "#E1BEE7"))

(use-package hl-line
  :commands (hl-line-mode)
  :custom-face
  (hl-line ((t (:background "gray20")))))

;;;; Support ligatures

;; See https://github.com/tonsky/FiraCode/wiki/Emacs-instructions#user-content-using-composition-char-table
;; (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
;;                (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
;;                (36 . ".\\(?:>\\)")
;;                (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
;;                (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
;;                (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")

;;                ;; This one interferes with formatting of hlines in org-mode tables
;;                ;; (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
;;                (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
;;                (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
;;                (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
;;                (48 . ".\\(?:x[a-zA-Z]\\)")
;;                (58 . ".\\(?:::\\|[:=]\\)")
;;                (59 . ".\\(?:;;\\|;\\)")

;;                ;; This one interferes with org-mode tables
;;                ;; (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
;;                (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|<[<=]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|]\\)")
;;                (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
;;                (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
;;                (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
;;                (91 . ".\\(?:]\\)")
;;                (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
;;                (94 . ".\\(?:=\\)")
;;                (119 . ".\\(?:ww\\)")
;;                (123 . ".\\(?:-\\)")
;;                (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
;;                (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
;;                )
;;              ))
;;   (dolist (char-regexp alist)
;;     (set-char-table-range composition-function-table (car char-regexp)
;;                           `([,(cdr char-regexp) 0 font-shape-gstring]))))

(use-package ligature
  :disabled
  :config
  ;; Enable the "www" ligature in every possible major mode
  (ligature-set-ligatures 't '("www"))
  ;; Enable traditional ligature support in eww-mode, if the
  ;; `variable-pitch' face supports it
  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
  ;; Enable all Cascadia Code ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                       "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                       "\\\\" "://"))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))

;; This has to be very early in initialization.
(defvar outline-minor-mode-prefix "\M-#")

;; (add-to-list 'load-path "/Users/acowley/.nix-profile/share/emacs/site-lisp")

;;; General emacs configuration

;;;; Elisp Helpers
(require 'subr-x)

(defun path-up-one-level ()
  "Remove the trailing directory component of a path at point"
  (interactive)
  (let ((path (thing-at-point 'filename t)))
    (when path
      (goto-char (point-min))
      (let ((end (search-forward path)))
        (when end
          (let ((start (search-backward path)))
            (when start
              (let ((new-path (file-name-directory (directory-file-name path))))
                (kill-region start end)
                (insert new-path)))))))))
(bind-key "C-l" #'path-up-one-level minibuffer-local-map)

(defun my/eval-last-sexp (raw-prefix)
  "A wrapper around `eval-last-sexp' that modifies the behavior when called with a prefix argument to insert the result of evaluating the sexp before point after inserting an arrow. The result is the original sexp is left in the buffer, followed by an arrow, followed by the result of evaluation. If no prefix is given, the result is shown in the minibuffer as with `eval-last-sexp'."
  (interactive "P")
  (if (null raw-prefix)
      (eval-last-sexp raw-prefix)
    (let ((val (eval (macroexpand-all
                      (eval-sexp-add-defvars (elisp--preceding-sexp)))
                     lexical-binding)))
      (insert (format " ⇒ %s" val)))))

(global-set-key (kbd "C-x C-e") 'my/eval-last-sexp)

(defun backward-skip-alpha (&optional pt)
  "Move point backward until the last contiguous alpha character

Used as part of yas-key-syntaxes to expand snippets immediately
preceded by a dollar sign character `$' as encountered when
entering LaTeX math mode."
  (re-search-backward (rx (not (any alpha))))
  (when (not (null (match-beginning 0)))
    (right-char)))

(defun split-third ()
  "Split the frame into two windows split vertically with the one
on the left taking up 2/3rds of the width."
  (interactive)
  (delete-other-windows)
  (split-window-horizontally)
  (split-window-horizontally)
  (balance-windows)
  (delete-window))

(defun go-fullscreen ()
  "If the current frame is not already full screen, disable the
menu bar, set the frame to full screen, and vertically split the
window into a 2:1 ratio."
  (interactive)
  (unless (eq (frame-parameter nil 'fullscreen) 'fullboth)
    (menu-bar-mode -1)
    (toggle-frame-fullscreen)
    (split-third)))

(defun increment-number-aux (offset)
  "Increment the number point is in or adjacent to. If a prefix
argument is given, its numeric value is added to the number
rather than the default of 1."
  (interactive "P")
  (let ((n (number-at-point)))
    (when n
      (replace-match (format "%d" (+ n (or offset 1)))))))

(defun increment-number (offset)
  "Increment the number point is in or adjacent to. If a prefix
argument is given, its numeric value is added to the number
rather than the default of 1. This is a wrapper for
`increment-number-aux' that is multiple-cursor aware.

If you are using helm, ensure that `helm-M-x' is in your
`mc/cmds-to-run-once' list (often set in ~/.mc-lists.el)."
  (interactive "P")
  (if (> (or (mc/num-cursors) 1) 1)
      (mc/execute-command-for-all-cursors #'increment-number-aux)
    (funcall #'increment-number-aux offset)))

(defun insert-after (x y xs)
  "`(insert-after x y list)` inserts `y` after `x` in `list`. If
`x` is not found, `list` is returned unchanged. This is a
non-destructive operation."
  (let ((rest xs)
        (result))
    (while rest
      (cond
       ((eq (car rest) x)
        (setq result (append (reverse (cons (car rest) result))
                             (cons y (cdr rest))))
        (setq rest nil))
       ((null (cdr rest))
        (setq rest nil)
        (setq result xs))
       (t (setq result (cons (car rest) result))
          (setq rest (cdr rest)))))
    result))

(defun fill-list (xs &optional separator prefix suffix)
  "Format a list to respect the fill column.

List elements are separated by SEPARATOR. The formatted list is
prefixed by PREFIX, and terminated by SUFFIX. If the list is
wrapped across multiple lines, lines after the first are indented
by a number of spaces equal to the length of PREFIX."
  (require 'cl-lib)
  (let ((sep (or separator ", "))
        (prefix-len (if prefix (length prefix) 0)))
    (with-temp-buffer
      (when prefix (insert prefix))
      (insert (string-join xs sep))
      (when suffix (insert suffix))
      (goto-char (point-min))
      (setq fill-prefix (cl-loop repeat prefix-len concat " "))
      (fill-paragraph)
      (buffer-string))))

(defun parse-time-span (s)
"Parse a time span string representing hours, minutes and seconds
of the form \"3h2m48.293s\" into a number of seconds."
  (let* ((hours (pcase (split-string s "h")
                  (`(,h ,rest) (cons (* 60 60 (string-to-number h)) rest))
                  (_ (cons 0 s))))
         (mins (pcase (split-string (cdr hours) "m")
                 (`(,m ,rest) (cons (* 60 (string-to-number m)) rest))
                 (_ `(0 . ,(cdr hours)))))
         (secs (pcase (split-string (cdr mins) "s")
                 (`(,s ,_) (string-to-number s))
                 (_ (error "No seconds component")))))
    (+ (car hours) (car mins) secs)))

;; Based on http://emacs.stackexchange.com/a/11067/6537
(defun my-transpose-sexps ()
  "If point is at or just after certain chars (comma, space, or
dash) transpose chunks around that. Otherwise transpose sexps."
  (interactive "*")
  (if (not (or (looking-at "[, -]*")
               (looking-back "[, -]*" (point-at-bol))))
      (progn (transpose-sexps 1) (forward-sexp -1))
    (while (looking-at "[, -]") (forward-char))
    (let ((beg (point)) end rhs lhs)
      (while (and (not (eobp))
                  (not (looking-at "\\s-*\\([,]\\|\\s)\\)")))
        (forward-sexp 1))
      (setq rhs (buffer-substring beg (point)))
      (delete-region beg (point))
      (re-search-backward "[,]\\s-*" nil t)
      (setq beg (point))
      (while (and (not (bobp))
                  (not (looking-back "\\([,]\\|\\s(\\)\\s-*" (point-at-bol))))
        (forward-sexp -1))
      (setq lhs (buffer-substring beg (point)))
      (delete-region beg (point))
      (insert rhs)
      (re-search-forward "[,]\\s-*" nil t)
      (save-excursion
        (insert lhs)))))

(defun insert-include-guard ()
  "Insert a C/C++-style ‘#ifndef‘ include guard in the current buffer."
  (interactive)
  (let* ((fname (buffer-file-name))
         (ext (upcase (file-name-extension fname)))
         (base (upcase (file-name-sans-extension (file-name-nondirectory fname))))
         (guard (concat "__" base "_" ext)))
    (save-excursion
      (goto-char (point-min))
      (insert (concat "#ifndef " guard "\n#define " guard "\n\n\n"))
      (goto-char (point-max))
      (insert "\n#endif"))
    (forward-line 4)))

(defun serve-project-path (fname)
  "Transform a file name into a path relative to a project root."
  (let ((project-root (expand-file-name
                       (or (locate-dominating-file fname "WORKSPACE")
                           (locate-dominating-file fname "run-container.sh")))))
    (string-remove-prefix project-root (expand-file-name fname))))

(defun insert-serve-include-guard ()
  "Insert a C/C++-style '#ifndef' include guard using Serve conventions"
  (interactive)
  (let* (;; (fname (serve-project-path (buffer-file-name)))
         ;; (ext (upcase (file-name-extension fname)))
         ;; (base (upcase (file-name-sans-extension (file-name-nondirectory fname))))
         ;; (path (upcase (file-name-directory fname)))
         ;; (guard (string-replace "/" "_" (concat path base "_" ext "_")))
         (copyright "/**
 * Copyright 2022 Serve Robotics Inc.
 */\n\n"))
    (save-excursion
      (goto-char (point-min))
      (insert (concat copyright "#pragma once\n"))
      ;; (insert (concat copyright "#ifndef " guard "\n#define " guard "\n\n\n"))
      ;; (goto-char (point-max))
      ;; (insert (concat "\n#endif  // " guard))
      )
    (forward-line 5)))

(require 'dash)
(defun start-of-week ()
  "Return a date triple of (MONTH DAY YEAR) for the Sunday that starts the current week."
  (-find (-compose #'zerop #'calendar-day-of-week)
         (-map #'calendar-current-date (-iterate #'1- 0 7))))

(defun till-start-of-week ()
  "Return a list of dates going back to the most recent Sunday."
  (let ((res (-split-with (-compose #'not #'zerop #'calendar-day-of-week)
                          (-map #'calendar-current-date (-iterate #'1- 0 7)))))
    (append (car res) (caadr res))))

(defun time-to-date (time)
  "Convert a time as returned by `parse-time-string' to a date as returned by `calendar-current-date'."
  (pcase time
    (`(,_ ,_ ,_ ,day ,mon ,year ,_ ,_ ,_) (list mon day year))))

(defun count-completed-tasks ()
  "Count up all tasks completed this week and this month.
Considers entries in the current buffer whose headlines match `* DONE' and have a `:completed:' property with a date."
  (interactive)
  (let* ((days-of-week (till-start-of-week))
         (this-month (car (calendar-current-date))))
    (let* ((res (org-map-entries
                 (lambda ()
                   (let* ((props (org-entry-properties))
                          (completed (assoc "COMPLETED" props))
                          (date (and completed 
                                     (time-to-date 
                                      (parse-time-string (cdr completed)))))
                          (month (and date (car date))))
                     (if completed
                         (cons (if (= month this-month) 1 0)
                               (if (-any-p (-partial #'equal date) days-of-week)
                                   1 0))
                       '(0 . 0))
                     ))
                 "* DONE"))
           (sums (-reduce (lambda (acc x)
                            (pcase (cons acc x)
                              (`((,acc-m . ,acc-w) . (,m . ,w))
                               (cons (+ acc-m m) (+ acc-w w)))))
                          res)))
      (pcase sums
        (`(,month-count . ,week-count)
         (message "%d tasks completed this week; %d this month" week-count month-count))))))

(defun quote-shell-string (str)
  "Safely embed a string in single-quotes.

We can pass single-quoted strings to shell commands, but single
quotes within those strings need to be escaped. We use the
technique of ending the quoted string, concatenating a literal
single-quote character, and concatenating the remaining
single-quoted string."
    (concat "'" (replace-regexp-in-string "'" "'\\\\''" str) "'"))

(defun parenthesize-negatives ()
"Wrap negative numeric literals in parentheses.

Parentheses are required with negative numeric literals Haskell.
This helper makes it slightly easier to paste numbers into
Haskell programs as it may be applied to all numbers in region."
  (interactive)
  (if (region-active-p)
      (save-excursion
        (let ((regexp (rx "-" (+ (or digit ?.))))
              (start (region-beginning))
              (end (region-end)))
          (goto-char start)
          (while (re-search-forward regexp end t)
            (message "Found match: %s" (match-string 0))
            (replace-match "(\\&)" nil nil)
            (set 'end (+ end 2)))))
    (message "Select a region first")))

;;;; Miscellaneous Settings

;; A short mode line that is going to be tweaked with moody
;; (setq-default mode-line-format
;;       '("%e"
;;         mode-line-modified
;;         mode-line-buffer-identification
;;         "   "
;;         mode-line-position
;;         (vc-mode vc-mode)
;;         "  "
;;         mode-line-modes
;;         mode-line-misc-info
;;         mode-line-end-spaces))

(when (display-graphic-p)
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z")))

(setq confirm-kill-emacs #'y-or-n-p)

(setq frame-resize-pixelwise t)

(setq warning-suppress-types '((comp)))

(put 'narrow-to-region 'disabled nil)

(setq inhibit-compacting-font-caches t)

(column-number-mode 1)

(set-scroll-bar-mode 'right)

;; (tool-bar-mode -1)

;; (when (and window-system (not (memq window-system '(mac ns))))
;;   (set-frame-size (selected-frame) 80 56))

;; Enable ligatures for fonts that provide them (e.g. hæck)
;; This may cause slowdown
;; (add-hook 'prog-mode-hook #'mac-auto-operator-composition-mode)
;; (add-hook 'prog-mode-hook (lambda () (auto-composition-mode -1)))
;; (add-hook 'text-mode-hook (lambda () (auto-composition-mode -1)))

(setq tab-always-indent 'complete)

(setq display-line-numbers-type 'relative)

;; Let us use a minibuffer command (as with a package like consult)
;; while using another command in the minibuffer
(setq enable-recursive-minibuffers t)
(minibuffer-depth-indicate-mode 1)

;; Disable electric-quote-mode everywhere
(add-hook 'after-change-major-mode-hook
          (lambda () (electric-quote-mode -1)))
(electric-quote-mode -1)

;; This was causing some odd behavior for me where the first quote I
;; hit wouldn't create a closing quote, then when I manually added the
;; closing quote electric-pair-mode would add a third quote which I'd
;; have to delete!
(setq electric-pair-preserve-balance nil
      ;; A non-nil value can make it hard to insert a quote on a
      ;; newline if the first character of the next line is a
      ;; quotation mark.
      electric-pair-skip-whitespace nil)


;; I had this problem where if I have a line that starts with a double
;; quote character, and I want to insert a new line before it that
;; also starts with a double quote, when I type the new double quote
;; character, point moves to just past the starting double quote on
;; the next line. This is unhelpful in programming situations.
(setq electric-pair-skip-self
      (lambda (c)
        (unless (and (char-equal c ?\") (eolp))
          (electric-pair-default-skip-self c))))

(electric-pair-mode +1)

(add-hook 'prog-mode-hook #'electric-indent-mode)

;; Cause use-package to install packages automatically if not already
;; present
; (setq use-package-always-ensure t)

;; Clean trailing whitespace when saving a buffer.

;; This is too dangerous: it makes producing minimal diffs harder than
;; necessary, and can break things that expect a trailing whitespace
;; (e.g. with a regex). It may be fine for my own code, but judgment
;; should be applied before invoking it.
;; (setq before-save-hook #'whitespace-cleanup)

;; Keep ediff UI in a single frame
(setq ediff-window-setup-function #'ediff-setup-windows-plain)

;; Disable ligatures in ediff buffers
(add-hook 'ediff-mode-hook
            (lambda ()
              (setq auto-composition-mode nil)))

;; Use the exec-path-from-shell package to set the PATH
;; (use-package exec-path-from-shell
;;   :if (memq window-system '(mac ns))
;;   :config
;;   (setq exec-path-from-shell-arguments (list "-l"))
;;   (exec-path-from-shell-initialize))

;; Move point to farthest possible position when scrolling the window
;; has reached the beginning or end of the buffer
(setq scroll-error-top-bottom t)

;; Support Cmd-up/down for top/bottom of buffer
(global-set-key (kbd "<s-up>") 'beginning-of-buffer)
(global-set-key (kbd "<s-down>") 'end-of-buffer)

(global-set-key (kbd "C-x C-k") #'kill-buffer)

;; Make bookmark jumping easier
(global-set-key (kbd "C-c b") #'bookmark-jump)

;; Don't undo undo operations by default
(global-set-key (kbd "C-/") #'undo-only)
(global-set-key (kbd "C-_") #'undo-redo)

;; More convenient binding for going to a line
(global-set-key (kbd "C-c g") #'goto-line)

;; Use Shift+ArrowKey to move the cursor between windows.
;; This means you lose shift select.
(windmove-default-keybindings)
(setq windmove-wrap-around t)

;; Highlight matching parentheses
(show-paren-mode 1)

;; Speed up tramp from
;; https://emacs.stackexchange.com/a/37855
(setq vc-ignore-dir-regexp
      (format "%s\\|%s"
                    vc-ignore-dir-regexp
                    tramp-file-name-regexp))

;; Display PDFs inline
(add-to-list 'image-type-file-name-regexps '("\\.pdf\\'" . imagemagick))
(add-to-list 'image-file-name-extensions "pdf")
(setq imagemagick-types-inhibit (remove 'PDF imagemagick-types-inhibit))
(add-to-list 'imagemagick-enabled-types 'PDF)
(add-hook 'emacs-startup-hook (lambda ()
                                (imagemagick-register-types)))

;; (use-package session
;;   :commands (session-initialize)
;;   :init
;;   ;; Preserve history between sessions
;;   (add-hook 'after-init-hook 'session-initialize)

;;   ;; Don't interfere with helm-show-kill-ring
;;   (setq session-save-print-spec '(t nil 40000)))

; yank will replace the active region's contents
(delete-selection-mode 1)

(setq c-default-style "bsd"
      c-basic-offset 2)
(setq-default indent-tabs-mode nil)
(setq default-directory "~/")

(setq mac-option-modifier 'meta)

;; Keyboard shortcut for aligning a region on a regexp
(global-set-key (kbd "C-x a r") 'align-regexp)

;; Start the emacs server if possible
;; (when (fboundp 'server-mode) (funcall 'server-mode 1))

;; Revert buffers whose files have changed on disk
(global-auto-revert-mode t)

;; Disable the alarm bell on Quit (C-g)
(setq ring-bell-function 'ignore)

;; Turn off electric-indent-mode everywhere
(when (fboundp 'electric-indent-mode) (electric-indent-mode -1))

(put 'downcase-region 'disabled nil)

;; (setq TeX-command-extra-options "-shell-escape")

(put 'dired-find-alternate-file 'disabled nil)
(setq wdired-allow-to-change-permissions t)
(use-package dired
  :config
  (setq dired-listing-switches "-alh"
      dired-du-size-format t
      dired-dwim-target t)
  (add-hook 'dired-mode-hook (lambda () (recentf-add-file default-directory))))


;; When `'which-function` output is too long, it can interfere with
;; modeline rendering
(defun truncate-function-name (s)
  "Truncates a string to 20 characters. If the name has one or more
double colons (\"::\") in it, the part of the string after the
last double colon is truncated to 20 characters."
  (unless (null s)
    (if (> (length s) 20)
        (truncate-string-to-width
         (car (last (split-string s "::")))
         20 nil nil "...")
      s)))
(advice-add 'which-function :filter-return #'truncate-function-name)

;; From https://emacs.stackexchange.com/a/24658
(defun advice-unadvice (sym)
  "Remove all advices from symbol SYM."
  (interactive "aFunction symbol: ")
  (advice-mapc (lambda (advice _props) (advice-remove sym advice)) sym))

;(load-theme 'monokai t)
;(load-theme 'darktooth t)

(use-package recentf
  :init
  (setq
   ;; This is an attempt to prevent recentf (that keeps track of recent
   ;; files) from stat'ing remote files.
   ;; recentf-keep '(file-remote-p file-readable-p)
   recentf-keep '(recentf-keep-default-predicate)
   recentf-exclude
   `("/\\(\\(\\(COMMIT\\|NOTES\\|PULLREQ\\|TAG\\)_EDIT\\|MERGE_\\|\\)MSG\\|BRANCH_DESCRIPTION\\)\\'"
     ,(regexp-quote "/.emacs.d/elpa/")
     ,(regexp-quote "/var/folders/")
     ,(regexp-quote "/.emacs.d/bookmarks")
     ,(regexp-quote "/.emacs.d/recentf")))
  (defun recent-buffer (b &rest _)
    (let ((file (buffer-file-name (get-buffer b))))
      (unless (null file) (recentf-add-file file))))
  (advice-add 'switch-to-buffer :after #'recent-buffer)
  :config
  (setq recentf-max-saved-items 200))

;; Another options is
;; (require 'recentf)
;; (setq recentf-auto-cleanup 'never) ;; disable before we start recentf!
;; (recentf-mode 1)

;; John Wiegley's ANSI colors hook for compiler output
(defun compilation-ansi-color-process-output ()
  (ansi-color-process-output nil)
  (set (make-local-variable 'comint-last-output-start)
       (point-marker)))

(add-hook 'compilation-filter-hook #'compilation-ansi-color-process-output)

(defun sort-words ()
  (interactive)
  (sort-regexp-fields nil "\\w+" "\\&" (region-beginning) (region-end)))

(defun browse-url-safari (uri &args)
"Open a URI in Safari using AppleScript. This preserves anchors."
  (let ((script (format "
tell application \"Safari\"
  open location \"%s\"
  activate
end tell" uri)))
    (do-applescript script)))

(if (memq window-system '(mac ns))
    (setq browse-url-browser-function #'browse-url-safari)
  (setq browse-url-browser-function #'browse-url-firefox))

;; From http://emacsredux.com/blog/2013/06/21/eval-and-replace/
(defun eval-and-replace ()
  "Replace the preceding sexp with its value."
  (interactive)
  (backward-kill-sexp)
  (condition-case nil
      (prin1 (eval (read (current-kill 0)))
             (current-buffer))
    (error (message "Invalid expression")
           (insert (current-kill 0)))))

(global-set-key (kbd "C-c e") 'eval-and-replace)

;(setq visual-line-fringe-indicators '(left-curly-arrow nil))

;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
(defun unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (let ((fill-column (point-max)))
    (fill-paragraph nil region)))

;; Handy key definition
(define-key global-map "\M-Q" 'unfill-paragraph)

;; From Joao Tavora http://stackoverflow.com/a/18034042/277078
;; Kill a process in the *Process List* buffer created by
;; `list-processes`.
(defun joaot/delete-process-at-point ()
  (interactive)
  (let ((process (get-text-property (point) 'tabulated-list-id)))
    (cond ((and process
                (processp process))
           (delete-process process)
           (revert-buffer))
          (t
           (error "no process at point!")))))

(define-key process-menu-mode-map (kbd "C-k") #'joaot/delete-process-at-point)

(use-package visual-fill-column :defer t)

;; Put the visited file name in the frame title
;; (setq-default frame-title-format '("%f [%m]"))
(setq-default frame-title-format
              '("emacs - "
                (:eval (file-name-nondirectory (or (buffer-file-name) "")))
                " [%m]"))

;; (customize-set-variable pixel-scroll-precision-mode t)

;; Kills the whole line (incuding the newline) if at column zero.
;; Note: this is killing the whole line even when not at column zero.
;; (setq kill-whole-line t)

;; Add Byte as a unit to `calc`
;; From /u/politza https://www.reddit.com/r/emacs/comments/31xezm/common_byte_units_in_calc/cq6ef06?utm_source=share&utm_medium=web2x
(setq math-additional-units '(
  (GiB "1024 * MiB" "Giga Byte")
  (MiB "1024 * KiB" "Mega Byte")
  (KiB "1024 * B" "Kilo Byte")
  (B nil "Byte")
  (Gib "1024 * Mib" "Giga Bit")
  (Mib "1024 * Kib" "Mega Bit")
  (Kib "1024 * b" "Kilo Bit")
  (b "B / 8" "Bit")
  (FLOP nil "FLOP")))

;; Reset calc's cache
(setq math-units-table nil)

;;;; variable-pitch-mode
(defun my/text-mode-hook ()
  (flyspell-mode)
  (turn-on-visual-line-mode)
  (variable-pitch-mode)
  (setq left-margin-width 2
        right-margin-width 2)
  ;; (setq buffer-face-mode-face '(:family "Helvetica Neue" :weight thin))
  ;; (setq buffer-face-mode-face '(:family "Avenir Next"))
  ;; (setq variable-pitch-face '(:family "Avenir Next"))
  ;; (setq buffer-face-mode-face '(:family "Montserrat"))
  ;; (buffer-face-mode)
  ;; (text-scale-adjust 1.5)
  ;; (text-mode-hook-identify)
  )
(add-hook 'text-mode-hook #'my/text-mode-hook)

;;;; Ignored extensions
(add-to-list 'completion-ignored-extensions ".hi")
(add-to-list 'completion-ignored-extensions ".o")
;; (add-hook 'ido-setup-hook (setq ido-ignore-extensions t))
;; (add-hook 'ido-setup-hook (lambda ()
;;                            (add-to-list 'ido-ignore-files "\\.hi")
;;                            (add-to-list 'ido-ignore-files "\\.o")))

;;;; Spell checking

;; brew install hunspell

;; Download the OpenOffice dictionary for the language you want. The
;; `.oxt' file is a zip archive. Put the `.aff' and `.dic' files from
;; that archive in `~/Library/Spelling/'. Then create symlinks from,
;; for example, `en_US.aff' to `default.aff' in that directory, and
;; likewise for the `.dic' file. Try running `hunspell -D' to see what
;; dictionaries hunspell is using. The "personal dictionary" is just a
;; word list.
(when (memq window-system '(mac ns))
    (progn
      (setq ispell-program-name "hunspell")
      (setq ispell-local-dictionary "en_US")
      (setq ispell-personal-dictionary "~/.hunspell_en_US")))
;; (setq ispell-local-dictionary-alist
;;       '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil
;;          ("-d" "en_US"))
;;         nil utf-8))
;(setq ispell-extra-args '("-a" "-i" "utf-8"))

;; hunspell hacking to get ispell to actually use utf-8
;; See: http://stackoverflow.com/questions/3961119/working-setup-for-hunspell-in-emacs

(add-hook 'emacs-startup-hook
          (lambda ()
            (eval-after-load "ispell" '(defun ispell-get-coding-system () 'utf-8))
            (add-hook 'prog-mode-hook 'flyspell-prog-mode)
            (add-hook 'text-mode-hook 'flyspell-mode)))

;;;; Copy and comment
(defun copy-and-comment ()
  (interactive)
  (kill-ring-save (region-beginning) (region-end))
  (comment-dwim nil)
  (goto-char (region-end))
  (end-of-line)
  (newline-and-indent))

;;;; Tramp with sudo

;; We hardly ever want to actually ssh into a host as root. Instead,
;; we want to ssh into the host using your account name, and then
;; switches to root on the host. This lets us use paths like
;; `/sudo:remotehost:/etc/hdparm.conf`. Remember that there has been a
;; history of projectile-global-mode interfering with such file
;; operations, so you may need to disable that temporarly.
;; See the manual: https://www.gnu.org/software/tramp/#Multi_002dhops
;; (add-to-list 'tramp-default-proxies-alist
;;              '(nil "\\`root\\'" "/ssh:%h:"))
;; (add-to-list 'tramp-default-proxies-alist
;;              '((regexp-quote (system-name)) nil nil))

;;;; cparens
(defun cparens ()
  "Parenthesize the C expression in region"
  (interactive)
  (if (region-active-p)
      (let* ((exp (buffer-substring (region-beginning) (region-end)))
             (tmp (make-temp-file "cparens-input")))
        (unwind-protect
            (progn
              (write-region (region-beginning) (region-end) tmp)
              (let ((res (with-temp-buffer
                           (cons
                            (call-process "cparens" tmp (current-buffer) nil)
                            (buffer-substring-no-properties
                             (point-min) (point-max))))))
                (if (eq (car res) 0)
                    (progn
                      (delete-region (region-beginning) (region-end))
                      (insert (cdr res)))
                  (error (cdr res)))))
            (delete-file tmp)))))


;;;; Firefox (or Chromium) session save/load
;; From https://acidwords.com/posts/2019-12-04-handle-chromium-and-firefox-sessions-with-org-mode.html
;; with more discussion on reddit https://www.reddit.com/r/emacs/comments/e6fxrf/handle_chromium_firefox_sessions_with_orgmode/

(require 'cl-lib)
(defun save-firefox-session ()
  "Reads chromium current session and generates an org-mode heading with items."
  (interactive)
  (save-excursion
    (let* ((dir "~/.mozilla/firefox/")
           (dirs (directory-files dir))
           (unique-dir (cl-find-if (lambda (x)
                                     (and (string-match "\\.default" x)
                                          (file-accessible-directory-p (concat dir x))))
                                   dirs))
           (path (concat dir unique-dir "/sessionstore-backups/recovery.jsonlz4"))
           (cmd (concat "nix run nixpkgs.lz4json -c lz4jsoncat " path
                        " | nix run nixpkgs.jq -c jq '.windows[].tabs[] | .entries[-1] | .url'"
                        " | sed 's/\"//g' | sort | uniq"))
           (ret (shell-command-to-string cmd)))
      (insert
       (concat "* "
               (format-time-string "[%Y-%m-%d %H:%M:%S]")
               "\n"
               (mapconcat (lambda (x) (concat "  - " x))
                          (cl-remove-if (lambda (x) (or (null x)
                                                        (string-blank-p x)
                                                        (string= "null" x)))
                                        (split-string ret "\n"))
                          "\n"))))))

(defun restore-firefox-session ()
  "Restore web browser session by opening each link with `browse-url`.

Make sure to put cursor on date heading that contains a list of urls."

  (interactive)
  (save-excursion
    (beginning-of-line)
    (when (looking-at "^\\*")
      (forward-line 1)
      (while (looking-at "^[ ]+-[ ]+\\(http.?+\\)$")
        (let* ((ln (thing-at-point 'line t))
               (ln (replace-regexp-in-string "^[ ]+-[ ]+" "" ln))
               (ln (replace-regexp-in-string "\n" "" ln)))
          (browse-url ln))
        (forward-line 1)))))
;;;; Offer diff on killing buffer with unsaved changes
;; From https://www.reddit.com/r/emacs/comments/13b2z5z/add_a_diff_to_the_yesnosave_and_quit_choices/jj9jcrt/
(defun my-ask-kill-buffer ()
  "Ask to diff, save or kill buffer"
  (if (and (buffer-file-name) (buffer-modified-p))
      (cl-loop for ch = (read-event "(K)ill buffer, (D)iff buffer, (S)ave buffer, (N)othing?")
               if (or (eq ch ?k) (eq ch ?K))
               return t
               if (or (eq ch ?d) (eq ch ?D))
               do (diff-buffer-with-file)
               if (or (eq ch ?s) (eq ch ?S))
               return (progn (save-buffer) t)
               if (or (eq ch ?n) (eq ch ?N))
               return nil)
    t))
(add-to-list 'kill-buffer-query-functions #'my-ask-kill-buffer)
;;; Diminish
(use-package diminish :disabled t)
;;; Themes
;; (use-package darkokai-theme :defer t)
;; (use-package monokai-theme :defer t)
(use-package apropospriate-theme
  :config
  (load-theme 'apropospriate-dark t)
  :custom-face
  (region ((t (:background "gray22"))))
  (helm-match ((t (:foreground "gold"))))
  ;; (company-tooltip-selection ((t (:background "SteelBlue"))))
  ;; (company-tooltip-annotation-selection ((t (:background "SteelBlue"))))
  ;; (company-tooltip-common-selection ((t (:foreground "black" :background "DeepSkyBlue"))))
  ;; (company-tooltip-common ((t (:foreground "DeepSkyBlue"))))
  (lsp-ui-peek-selection ((t (:background "DeepSkyBlue"))))
  (lsp-ui-peek-highlight ((t (:foreground "gold"))))
  (mode-line-inactive ((t (:background "gray16" :box nil)))))

;;; emacs server
(use-package server
  :config (and (fboundp 'server-mode)
               (add-hook 'emacs-startup-hook
                         (lambda ()
                           (or (server-running-p) (server-mode))))))
;;; company-mode
(use-package company
  :disabled t
  ;; :defer nil
  :commands (company-mode)
  :hook (prog-mode . company-mode)
  ;; :init
  ;; (add-hook 'prog-mode-hook 'company-mode)
  :custom (company-minimum-prefix-length 2)
  :config
  ;; (setq company-idle-delay 0.1)
  (setq company-idle-delay 0.0)
  ;; (define-key company-mode-map (kbd "C-:") 'helm-company)
  ;; (define-key company-active-map (kbd "C-:") 'helm-company)
  )
;;; prescient
(use-package prescient
  :defer nil
  :custom (company-prescient-sort-length-enable nil)
  :commands (prescient-persist-mode)
  :hook (company-mode . prescient-persist-mode)
  :config
  (prescient-persist-mode +1)
  (setq prescient-filter-method '(literal regexp initialism)))
;;; company-prescient
(use-package company-prescient
  :disabled t
  :commands (company-prescient-mode)
  :hook (company-mode . company-prescient-mode)
  :config
  (setq company-prescient-sort-length-enable nil))
;;; company-box
(use-package company-box
  :disabled
  :defer t
  :hook (company-mode . company-box-mode)
  :custom (company-box-icons-alist 'company-box-icons-all-the-icons))
;;; selectrum
(use-package selectrum
  ;; :defer 1
  ;; :commands (selectrum-mode)
  :disabled t
  :demand
  :config
  ;; (set-face-background 'selectrum-current-candidate "DeepSkyBlue")
  (set-face-background 'selectrum-current-candidate "gray31")
  (set-face-foreground 'selectrum-current-candidate "DeepSkyBlue")
  (selectrum-mode +1))
;;; selectrum-prescient
(use-package selectrum-prescient
  :disabled t
  :commands (selectrum-prescient-mode)
  :after selectrum
  :demand
  :config
  ;; (add-hook 'selectrum-mode-hook #'selectrum-prescient-mode)
  ;; :hook (selectrum-mode-hook . selectrum-prescient-mode)
  (selectrum-prescient-mode +1))
;;; orderless
(use-package orderless
  :init
  ;; From the corfu wiki
  (defun my/orderless-dispatch-flex-first (_pattern index _total)
    (and (eq index 0) 'orderless-flex))

  (setq completion-styles '(orderless partial-completion basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))
        orderless-component-separator #'orderless-escapable-split-on-space

        ;; Configure the first word as flex filtered
        ;; orderless-style-dispatchers (list #'my/orderless-dispatch-flex-first)
        ))
;;; cape
(use-package cape
  :commands (cape-capf-buster))
;;; corfu
(use-package corfu
  :defer nil
  :custom
  (corfu-auto t)          ;; Enable auto completion
  :bind (:map corfu-map
              ;; (("M-SPC" . corfu-insert-separator))
              (("S-SPC" . corfu-insert-separator))
              )

  ;; :bind (("M-SPC" . corfu-insert-separator))
  :commands (global-corfu-mode)
  :config
  (setq corfu-auto-delay 0.0
        ;; This lets us use separators (spaces) whenever we want
        ;; corfu-quit-at-boundary nil
        corfu-quit-at-boundary 'separator
        corfu-quit-no-match t
        corfu-echo-documentation nil)
  (global-corfu-mode 1)
  (require 'corfu-history)
  (corfu-history-mode 1)
  (setq corfu-history-length 100)

  ;; Combine sorting from lsp-mode and corfu-sort-function.
  ;; The intention is to incorporate recency better than what
  ;; lsp-mode does out of the box.
  ;; From the corfu wiki:
  ;; https://github.com/minad/corfu/wiki#combined-sorting
  (defun my-corfu-combined-sort (candidates)
    "Sort CANDIDATES using both display-sort-function and corfu-sort-function."
    (let ((candidates
           (let ((display-sort-func (corfu--metadata-get 'display-sort-function)))
             (if display-sort-func
                 (funcall display-sort-func candidates)
               candidates))))
      (if corfu-sort-function
          (funcall corfu-sort-function candidates)
        candidates)))

  (setq corfu-sort-override-function #'my-corfu-combined-sort))
;;; corfu-prescient
(use-package corfu-prescient
  :disabled
  :hook ((corfu-mode . corfu-prescient-mode)
         ;; (global-corfu-mode . corfu-prescient-mode)
         )
  :init
  (setq corfu-prescient-override-sorting t)
  :config
  (setq completion-styles '(prescient partial-completion basic)))
;;; vertico
(use-package vertico
  :config
  (vertico-mode))
(use-package savehist
  :init
  (savehist-mode)
  (add-to-list 'savehist-additional-variables 'corfu-history))
(use-package vertico-prescient
  :commands (vertico-prescient-mode)
  :config
  (vertico-prescient-mode))
;;; consult
(use-package consult
  :defer nil
  :commands (consult-line consult-buffer consult-yank-from-kill-ring consult-goto-line consult-ripgrep consult-locate)
  :bind (("C-x C-b" . consult-buffer)
         ("C-y" . my/yank)
         ("M-g g" . consult-goto-line)
         ("C-c i" . consult-imenu)
         ;; ("C-s" . consult-line)
         ("C-s" . my/search-forward)
         ("C-x l" . consult-locate)
         )
  :after projectile
  :custom (consult-locate-command (if (memq window-system '(mac ns))
                                      "mdfind -onlyin /Users/acowley -name ARG OPTS"
                                      "/run/wrappers/bin/locate --ignore-case --existing --regexp ARG OPTS"))
  :config
  (require 'consult-imenu)
  (setq consult-project-root-function #'projectile-project-root
        consult-async-input-debounce 0.1
        consult-narrow-key "<"
        consult-locate-args (if (memq window-system '(mac ns))
                                "mdfind -onlyin /Users/acowley -name"
                              "/run/wrappers/bin/locate -e -A --regex"))

  (setq completion-in-region-function
      (lambda (&rest args)
        (apply (if vertico-mode
                   #'consult-completion-in-region
                 #'completion--in-region)
               args)))

  ;; I use consult-buffer to visit recent files, but previewing any
  ;; file I touch while navigating the list of completions is too
  ;; slow. However, I very much want previews when using something
  ;; like consult-line so that I can see the context of each match. To
  ;; address this, I use an explicit keybinding for previews when
  ;; using consult-buffer, but otherwise leave it at its default of
  ;; 'any.
  (defun my/disable-consult-preview ()
    (setq consult-preview-key "M-."))
  (defun my/enable-consult-preview ()
    (setq consult-preview-key 'any))
  (advice-add #'consult-buffer :before #'my/disable-consult-preview)
  (advice-add #'consult-buffer :after #'my/enable-consult-preview)
  (defun consult-line-symbol-at-point ()
    (interactive)
    (consult-line (thing-at-point 'symbol)))
  (defun my/search-forward (prefix)
    "Calls `consult-line` unless a prefix argument is given, in which case it calls `isearch-forward`"
    (interactive "P")
    (if (null prefix)
        (consult-line-symbol-at-point)
      (isearch-forward)))
  (defun my/yank (prefix)
    (interactive "P")
    (if (null prefix)
        (call-interactively #'consult-yank-from-kill-ring)
      (clipboard-yank))))

(use-package consult-flycheck
  :commands (consult-flycheck))

(use-package consult-dir
  :ensure t
  :bind (("C-x C-d" . consult-dir)
         :map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))

(use-package consult-projectile
  :commands (consult-projectile)
  :bind (("C-x C-p" . consult-projectile)))

(use-package consult-org-roam
  :commands (consult-org-roam-file-find consult-org-roam-search))

(use-package consult-notmuch
  :commands (consult-notmuch consult-notmuch-tree))
;;; marginalia
(use-package marginalia
  :commands (marginalia-mode)
  :bind (;; ("M-A" . marginalia-cycle)
         :map minibuffer-local-map
              ("M-A" . marginalia-cycle))
  :init
  (marginalia-mode))

;;; which-key
(use-package which-key
  :defer nil
  :commands (which-key-mode which-key-enable-god-mode-support)
  :config
  (which-key-enable-god-mode-support)
  (which-key-mode))

;;; embark
(use-package embark
  :commands (embark-act embark-bindings embark-export embark-prefix-help-command)
  :bind (("C-S-e" . embark-dwim) 
         ("C-S-a" . embark-act)
         :map minibuffer-local-map
         ("C-c C-e" . embark-export)
         ("C-." . embark-act)
         ("C-h B" . embark-bindings))
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  (defun my/occur-edit-hook ()
    (when (< (count-windows) 2)
      (progn
        (setq my--split-for-occur-edit t)
        (split-window-vertically))))
  (defun my/occur-edit-cease ()
    (when (bound-and-true-p my--split-for-occur-edit)
      (delete-window)))
  (add-hook 'occur-edit-mode-hook #'my/occur-edit-hook)
  (advice-add 'occur-cease-edit :after #'my/occur-edit-cease)
  (setq embark-action-indicator
        (lambda (map _target)
          (which-key--show-keymap "Embark" map nil nil 'no-paging)
          #'which-key--hide-popup-ignore-command)
        embark-become-indicator embark-action-indicator))

(use-package embark-consult
  :after (embark consult)
  ;; :hook
  ;; (embark-collect-mode . embark-consult-preview-minor-mode)
  )

;;; Projectile
(use-package projectile
  :commands (projectile-mode projectile-switch-project projectile-find-file)
  :custom
  (projectile-project-root-files-functions
   '(projectile-root-local projectile-root-top-down projectile-root-bottom-up projectile-root-top-down-recurring))
  ;; (projectile-completion-system 'helm)
  (projectile-completion-system 'default)
  :init
  (add-hook 'emacs-startup-hook #'projectile-mode)
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (setq projectile-other-file-alist
        (append '(("hpp" "h" "ipp" "cpp" "cc" "cu") ("cu" "h" "hpp"))
                projectile-other-file-alist))
  (defun my/projectile-mode-line ()
    "Simplified projectile mode line that does not determine the
project's type."
    (format "%s[%s]" projectile-mode-line-prefix (projectile-project-name)))

  (setq projectile-enable-caching t
        projectile-global-mode t
        projectile-mode-line-function #'my/projectile-mode-line
        projectile-ignored-projects '("~/")
        projectile-globally-ignored-directories
        '(".idea" ".eunit" ".git" ".hg" ".fslckout" ".bzr" "_darcs" ".tox" ".svn" ".cabal-sandbox" ".cabbages" ".stack-work" "build")
        projectile-project-root-files
        '(".projectile" "rebar.config" "project.clj" "SConstruct" "pom.xml" "build.sbt" "build.gradle" "Gemfile" "requirements.txt" "setup.py" "tox.ini" "package.json" "gulpfile.js" "Gruntfile.js" "bower.json" "composer.json" "Cargo.toml" "mix.exs" "stack.yaml" "compile_commands.json" "shell.nix" "flake.nix" "*.cabal")

        ; This causes problems when a parent project has a submodule
        projectile-git-submodule-command nil))

;;; yasnippet
(use-package yasnippet
  :commands (yas-global-mode yas-minor-mode yas-minor-mode-on)
  :hook ((haskell-mode . yas-minor-mode)
         (prog-mode . yas-minor-mode))
  :bind (("C-<tab>" . yas-next-field))
  :config
  (add-to-list 'yas-key-syntaxes #'backward-skip-alpha)

  ;; Without this, `company-complete-selection' causes yasnippet
  ;; placeholders be inserted so that yas-next-field is no longer
  ;; available.
  (setq yas-inhibit-overlay-modification-protection t))

;;; Dashboard
(use-package dashboard
  ;; :load-path "~/src/emacs-dashboard"
  ;; :commands dashboard-insert-startupify-lists
  :custom-face
  ;; (dashboard-heading ((t (:family "Yanone Kaffeesatz" :weight light :height 200 :foreground "#E1BEE7"))))
  ;; (dashboard-banner-logo-title ((t (:family "Yanone Kaffeesatz" :weight light :height 250))))
  ;; (dashboard-heading ((t (:font "Yanone Kaffeesatz Light:style=Light,Regular" :weight light :height 200 :foreground "#E1BEE7"))))
  ;; (dashboard-banner-logo-title ((t (:font "Yanone Kaffeesatz Light:style=Light,Regular" :weight light :height 250))))
  ;; (dashboard-heading ((t (:font yanone-font-name :weight light :height 200 :foreground "#E1BEE7"))))
  ;; (dashboard-banner-logo-title ((t (:font yanone-font-name :weight light :height 250))))
  :config
  (set-face-attribute 'dashboard-heading nil :font yanone-font-name :weight 'light :height 200 :foreground "#E1BEE7")
  (set-face-attribute 'dashboard-banner-logo-title nil :font yanone-font-name :weight 'light :height 250)
  (dashboard-setup-startup-hook)
  (setq dashboard-items '((recents  . 10)
                          (bookmarks . 5)
                          (projects . 5))
        dashboard-set-heading-icons t
        dashboard-set-file-icons t)
  (dashboard-refresh-buffer))

(use-package page-break-lines
  ;; Used by the dashboard package
  :commands (page-break-lines-mode))

;;; impatient-mode
(use-package impatient-mode
  :disabled
  :defer t
  :config
  ;; Use with `impatient-mode' by running `M-x imp-set-user-filter' in a
  ;; markdown buffer, and supplying `markdown-html' as the argument.
  (defun markdown-html (buffer)
    (princ (with-current-buffer buffer
             (format "<!DOCTYPE html><html><title>Impatient Markdown</title><xmp theme=\"united\" style=\"display:none;\"> %s </xmp><script src=\"http://strapdownjs.com/v/0.2/strapdown.js\"></script></html>" (buffer-substring-no-properties (point-min) (point-max))))
           (current-buffer)))

  (defun impatient-markdown ()
    "Serve markdown text as formatted HTML.

   Start up the simple HTTP server if it isn't running, enable
   `impatient-mode', and set the user filter to embed buffer
   contents in an HTML skeleton that invokes a Markdown processor
   on the text."
    (interactive)
    (unless (get-buffer "*httpd*") (httpd-start))
    (impatient-mode)
    (imp-set-user-filter #'markdown-html)))


;;; esup
;; (use-package esup
;;   :defer t
;;   :commands esup
;;   :config (setq esup-user-init-file (file-truename "~/dotfiles/emacs")))
;;; Org-mode

;;;; General Org Configuration
(use-package org
  ; :ensure org-plus-contrib
  ;; :pin org
  :defer 1
  :bind (("C-c l" . org-store-link)
         ("C-c a" . org-agenda)
         ("C-c c" . org-capture)
         ;; Don't fight the bindings that use
         ;; shift-arrow to move focus between windows.
         :map org-mode-map
         ("S-<left>" . nil)
         ("S-<right>" . nil)
         ("S-<up>" . nil)
         ("S-<down>" . nil))
  ;; :custom-face
  ;; (org-level-1 ((t (:foundry "UKWN" :family "Yanone Kaffeesatz" :weight light :height 250))))
  ;; (org-level-1 ((t (:font "Yanone Kaffeesatz Light:style=Light,Regular" :weight light :height 250))))
  ;; (org-level-1 ((t (:font yanone-font-name :weight light :height 250))))
  :custom-face
  (org-block ((t (:slant normal))))
  (org-quote ((t (:font "Roboto" :slant italic :height 150))))
  :config

  (require 'org-element)
  (require 'org-id)

  ;; Swap the tilde and backtick keys in orgmode
  ;; From http://mbork.pl/2022-01-17_Making_code_snippets_in_Org-mode_easier_to_type
  (defun org-insert-backtick ()
    "Insert a backtick using `org-self-insert-command'."
    (interactive)
    (setq last-command-event ?`)
    (call-interactively #'org-self-insert-command))

  (defun org-insert-tilde ()
    "Insert a tilde using `org-self-insert-command'."
    (interactive)
    (setq last-command-event ?~)
    (call-interactively #'org-self-insert-command))

  (define-key org-mode-map (kbd "`") #'org-insert-tilde)
  (define-key org-mode-map (kbd "~") #'org-insert-backtick)

  (define-key org-mode-map (kbd "C-c C-x C-TAB") #'org-clock-in)
  ;; (set-face-font 'org-level-1 "Yanone Kaffeesatz Light:style=Light,Regular")
  ;; (set-face-attribute 'org-level-1 nil yanone-font-name :weight 'light :height 250)
  ;; (set-face-attribute 'org-quote nil :font "Roboto" :slant 'italic :height 150)
  (set-face-font 'org-level-1 yanone-font-name)
  (if (or (memq window-system '(mac ns)) (not (file-exists-p "/etc/nixos")))
      (set-face-attribute 'org-level-1 nil :height 400 :weight 'light)
    (set-face-attribute 'org-level-1 nil :height 250 :weight 'light))
  (set-face-attribute 'org-headline-done nil :foreground "#B199BA")

  (setq org-src-fontify-natively 't
        org-use-speed-commands 't
        org-html-doctype "html5"
        org-directory "~/org"
        org-default-notes-file "~/org/home.org"
        org-agenda-dim-blocked-tasks 'invisible
        org-enforce-todo-dependencies 't
        org-hide-emphasis-markers t
        org-startup-folded t
        org-imenu-depth 3
        org-return-follows-link t
        ;; Don't let you edit invisible areas (i.e. after ellipsis)
        org-catch-invisible-edits 'show-and-error
        ;; Hide blank lines between headings in collapsed view
        org-cycle-separator-lines 0
        org-priority-faces '((?A . (:foreground "forest green" :weight bold))
                             (?B . (:foreground "slate gray"))
                             (?C . (:foreground "dim gray")))

        ;; To avoid giving SVG previews foreground or background colors at all,
        ;; one can set `:foreground' and `:background' to `nil' here.
        org-format-latex-options `(:foreground default
                                   :background default
                                   :scale ,(if (memq window-system '(mac ns))
                                               1.6
                                             ;; 2.0
                                             1.0
                                             )
                                   :html-foreground "Black"
                                   :html-background "Transparent"
                                   :html-scale 1.0
                                   :matchers ("begin" "$1" "$" "$$" "\\(" "\\["))

        org-latex-packages-alist '(("" "fontspec" nil))

        org-latex-create-formula-image-program 'dvisvgm

        ;; For leuven-theme
        ;; Fontify the whole line for headings (with a background color).
        org-fontify-whole-heading-line 't

        ;; Don't indent text to align with the headline
        org-adapt-indentation nil

        ;; Display of the first data row of the table at point in the
        ;; window header line
        org-table-header-line-p t

        ;; Use NAME affiliated keyword to generate anchor IDs if
        ;; CUSTOM_ID is not set
        org-html-prefer-user-labels t

        org-todo-keywords '((sequence "TODO" "|" "DONE" "ABANDONED"))

        ;; Speed up org fontification
        org-priority-regexp "^\\*+.*\\(\\[#\\([A-Z0-9]+\\)\\] ?\\)"

        org-src-preserve-indentation t

        org-fontify-quote-and-verse-blocks t

        ;; Truncate the org-clock task name shown in the mode line
        org-clock-heading-function (lambda ()
                                     (let ((str (nth 4 (org-heading-components))))
                                       (if (> (length str) 18)
                                           (substring str 0 18)
                                         str)))

        org-goto-interface 'outline-path-completionp
        org-outline-path-complete-in-steps nil
        org-duration-format 'h:mm
        org-id-link-to-org-use-id t
        org-refile-use-outline-path t
        org-refile-targets '((nil :maxlevel . 9))
        )

  ;; Resize latex preview fragments along with the text size.
  ;; From https://www.reddit.com/r/orgmode/comments/165zeuu/delighted_by_org_svg_preview/?ref=share&ref_source=link
  ;; (defun my/resize-org-latex-overlays ()
  ;;   (cl-loop for o in (car (overlay-lists))
  ;;            if (eq (overlay-get o 'org-overlay-type) 'org-latex-overlay)
  ;;            do (plist-put (cdr (overlay-get o 'display))
  ;;                          :scale (expt text-scale-mode-step
  ;;                                       text-scale-mode-amount))))
  ;; :hook
  ;; (org-mode . (lambda ()
  ;;               (add-hook 'text-scale-mode-hook
  ;;                         #'my/resize-org-latex-overlays nil t)))

  ;; org-mode supports inline map demarcated with \(...\) somewhat
  ;; better than dollar signs. But a dollar sign is easier to type, so
  ;; this little widget interprets a dollar sign to insert a \(\) pair
  ;; with point in between. If a dollar sign is inserted again, those
  ;; characters are replaced with an actual dollar sign.
  ;; I got this from Eric Fraga on the org mailing list.

  ;; from Nicolas Richard <theonewiththeevillook@yahoo.fr>
  ;; Date: Fri, 8 Mar 2013 16:23:02 +0100
  ;; Message-ID: <87vc913oh5.fsf@yahoo.fr>
  (defun yf/org-electric-dollar nil
    "When called once, insert \\(\\) and leave point in between.
       When called twice, replace the previously inserted \\(\\) by one $."
    (interactive)
    (if (and (looking-at "\\\\)") (looking-back "\\\\("))
        (progn (delete-char 2)
               (delete-char -2)
               (insert "$"))
      (insert "\\(\\)")
      (backward-char 2)))
  (define-key org-mode-map (kbd "$") 'yf/org-electric-dollar)

  (defun my/org-todo-change ()
    (let ((state (org-get-todo-state)))
      (cond
       ((and state (string= state "DONE"))
        (org-set-property "completed"
                          (format-time-string "<%Y-%m-%d %a %H:%M>"
                                              (org-current-time))))
       ((and state (string= state "TODO"))
        (org-set-property "opened" (format-time-string "<%Y-%m-%d %a %H:%M>"
                                                       (org-current-time)))))))
  (add-hook 'org-after-todo-state-change-hook #'my/org-todo-change)

  ;; (require 'ox-extra)
  ;; (ox-extras-activate '(ignore-headlines))
  (use-package org-contrib
    :after org
    :defer 10
    :config
    (require 'ox-extra)
    (ox-extras-activate '(ignore-headlines)))

  (use-package ox-reveal
    :defer t)

  (use-package ox-md :commands (org-md-export-to-markdown))
  (use-package ox-rss :commands (org-rss-publish-to-rss))

  ;(set-alist 'org-preview-latex-process-alist 'imagemagick (append '(:programs ("latex" "convert")) (alist-get 'imagemagick org-preview-latex-process-alist)))

  ;; From https://emacs.stackexchange.com/a/33077/6537
  (defun color-org-header (tag backcolor forecolor)
    "Apply coloring to lines based on presence of a tag"
    (goto-char (point-min))
    (while (re-search-forward tag nil t)
      (message "Applying color for %s" tag)
      (add-text-properties (point-at-bol) (point-at-eol) `(face (:foreground ,forecolor)))))

  (defun my-agenda-colors ()
    (save-excursion
      (color-org-header (rx "[#B]") "black" "slate gray")
      (color-org-header (rx "[#C]") "black" "dim gray")))

  (add-hook 'org-agenda-finalize-hook #'my-agenda-colors)

  (setq org-image-actual-width '(800))
  (setq org-latex-prefer-user-labels t)

  (use-package org-superstar
    :commands (org-superstar-mode)
    :config
    (setq ;; org-superstar-headline-bullets-list '("⁖" "◉" "○" "✸" "✿")
          org-superstar-headline-bullets-list '("»" "◉" "○" "✸" "✿")
          org-hide-leading-stars t))

  (use-package org-modern
    :commands (org-modern-mode)
    :config
    (setq ; org-modern-star ["»" "○" "◈" "◇" "⁕"]
          org-modern-star ["»" "◉" "○" "✸" "✿"]
          org-modern-hide-stars nil

          ;; Turn off settings that svg-tag-mode does more
          ;; nicely. Namely priorities. While other aspects of
          ;; svg-tag-mode are nice, they impose too large a
          ;; performance hit.
          org-modern-todo nil
          org-modern-priority nil
          org-modern-progress nil))

  (use-package svg-tag-mode
    :commands (svg-tag-mode)
    :config
    (defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
    (defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
    (defconst day-re "[A-Za-z]\\{3\\}")

    (defun svg-progress-percent (value)
      (svg-image (svg-lib-concat
                  (svg-lib-progress-bar (/ (string-to-number value) 100.0)
                                        nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                  (svg-lib-tag (concat value "%")
                               nil :stroke 0 :margin 0)) :ascent 'center))

    (defun svg-progress-count (value)
      (let* ((seq (mapcar #'string-to-number (split-string value "/")))
             (count (float (car seq)))
             (total (float (cadr seq))))
        (svg-image (svg-lib-concat
                    (svg-lib-progress-bar (/ count total) nil
                                          :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                    (svg-lib-tag value nil
                                 :stroke 0 :margin 0)) :ascent 'center)))

    (setq svg-tag-tags
          `(
            ;; Org tags
            ;; (":\\([A-Za-z0-9]+\\)" . ((lambda (tag) (svg-tag-make tag))))
            ;; (":\\([A-Za-z0-9]+[ \-]\\)" . ((lambda (tag) tag)))
            
            ;; Task priority
            ("\\[#[A-Z]\\]" . ( (lambda (tag)
                                  (svg-tag-make tag :face 'org-priority 
                                                :beg 2 :end -1 :margin 0))))

            ;; Progress
            ;; ("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag)
            ;;                                     (svg-progress-percent (substring tag 1 -2)))))
            ;; ("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag)
            ;;                                   (svg-progress-count (substring tag 1 -1)))))
            
            ;; TODO / DONE
            ;; ("TODO" . ((lambda (tag) (svg-tag-make "TODO" :face 'org-todo :inverse t :margin 0))))
            ;; ("ABANDONED" . ((lambda (tag) (svg-tag-make "ABANDONED" :face 'org-done :margin 0))))
            ;; ;; ("DONE" . ((lambda (tag) (svg-tag-make "DONE" :face 'org-done :margin 0))))
            ;; ("* \\(DONE\\)" . ((lambda (tag) (svg-tag-make "DONE" :face 'org-done :margin 0))))


            ;; Citation of the form [cite:@Knuth:1984] 
            ;; ("\\(\\[cite:@[A-Za-z]+:\\)" . ((lambda (tag)
            ;;                                   (svg-tag-make tag
            ;;                                                 :inverse t
            ;;                                                 :beg 7 :end -1
            ;;                                                 :crop-right t))))
            ;; ("\\[cite:@[A-Za-z]+:\\([0-9]+\\]\\)" . ((lambda (tag)
            ;;                                            (svg-tag-make tag
            ;;                                                          :end -1
            ;;                                                          :crop-left t))))

            
            ;; Active date (without day name, with or without time)
            ;; (,(format "\\(<%s>\\)" date-re) .
            ;;  ((lambda (tag)
            ;;     (svg-tag-make tag :beg 1 :end -1 :margin 0))))
            
            ; With date, day, and time
            ;; (,(format "\\(<%s %s %s>\\)" date-re day-re time-re) .
            ;;  ((lambda (tag)
            ;;     (svg-tag-make tag :beg 1 :end -1 :inverse nil :margin 0))))

            ;; (,(format "\\(<%s *\\)%s>" date-re time-re) .
            ;;  ((lambda (tag)
            ;;     (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0))))
            ;; (,(format "<%s *\\(%s>\\)" date-re time-re) .
            ;;  ((lambda (tag)
            ;;     (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0))))

            ;; Inactive date  (without day name, with or without time)
            ;; (,(format "\\(\\[%s\\]\\)" date-re) .
            ;;  ((lambda (tag)
            ;;     (svg-tag-make tag :beg 1 :end -1 :margin 0 :face 'org-date))))

            ;; date, day, time
            ;; (,(format "\\(\\[%s %s %s\\]\\)" date-re day-re time-re) .
            ;;  ((lambda (tag)
            ;;     (svg-tag-make tag :beg 1 :end -1 :margin 0))))
            
            ;; (,(format "\\(\\[%s *\\)%s\\]" date-re time-re) .
            ;;  ((lambda (tag)
            ;;     (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0 :face 'org-date))))
            ;; (,(format "\\[%s *\\(%s\\]\\)" date-re time-re) .
            ;;  ((lambda (tag)
            ;;     (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0 :face 'org-date))))
            )))

  ;; This is slow to load
  (use-package ox-tufte
    :load-path "~/src/ox-tufte"
    :defer t
    :commands (org-html-publish-to-tufte-html))

  ;; This is also slow to load
  (use-package ox-gfm
    :commands (org-gfm-export-to-markdown org-gfm-export-as-markdown))

  (use-package ox-koma-letter
     :defer t
     :commands (org-koma-letter-export-to-pdf
                org-koma-letter-export-as-latex
                org-koma-letter-export-to-latex))

  ;; Adapated from https://www.reddit.com/r/orgmode/comments/43uuck/temporarily_show_emphasis_markers_when_the_cursor/czmtn29/
  (defun org-show-emphasis-markers-at-point ()
    "Show emphasis and verbatim markers around point. This makes it easier to edit arounds the ends of markup when using `org-hide-emphasis-markers'."
    (unless nil ;; org-roam-backlinks-mode
      (save-match-data
        (if (and (or (org-in-regexp org-emph-re 2)
                     (org-in-regexp org-verbatim-re))
                 (>= (point) (match-beginning 3))
                 (<= (point) (match-end 4))
                 (member (match-string 3) (mapcar 'car org-emphasis-alist)))
            (with-silent-modifications
              (remove-text-properties
               (match-beginning 3) (match-beginning 5)
               '(invisible org-link)))
          (apply 'font-lock-flush (list (match-beginning 3) (match-beginning 5)))))))

  (defun my-org-hook ()
    (setq line-spacing 0.2)
    (setq header-line-format " ")
    (yas-global-mode)
    (org-superstar-mode 1)

    (add-hook 'post-command-hook
              'org-show-emphasis-markers-at-point nil t)

    ;; (org-table-sticky-header-mode)
    ;; (org-sticky-header-mode)

    ;; (require 'ox-extra)
    ;; (ox-extras-activate '(ignore-headlines))

    ;; electric quotes turn single quotes (') into smart single quotes
    ;; that can break things in src blocks
    (electric-quote-local-mode -1)

    ; Encryption
    ;; (require 'org-crypt)
    ;; (org-crypt-use-before-save-magic)
    ;; (setq org-tags-exclude-from-inheritance (quote ("crypt")))
    ;; ;; GPG key to use for encryption
    ;; ;; Either the Key ID or set to nil to use symmetric encryption.
    ;; (setq org-crypt-key "D50A574B")
)

  (use-package org-crypt
    ;; GPG key to use for encryption
    ;; Either the Key ID or set to nil to use symmetric encryption.
    :custom (org-crypt-key "71A75F0F")
    :commands (org-crypt-use-before-save-magic)
    :hook (org-mode . org-crypt-use-before-save-magic)
    :config

    ;; Tangling from an org buffer will save first, which causes
    ;; org-crypt to r-eencrypt everything. For specific modes, we may
    ;; want to add hooks to reveal elements after saving so that they
    ;; are decrypted before tangling. The basic idea came from here
    ;; https://ag91.github.io/blog/2020/10/30/org-crypt-and-tangling-source-blocks/
    ;; but the technique there did not work for me, so I came up with
    ;; this use of `org-decrypt-entries'.
    (defun ac/org-decrypt-all ()
      (auto-save-mode -1)
      (org-decrypt-entries))
    (defun ac/org-decrypt-after-save-on ()
      (add-hook 'after-save-hook #'ac/org-decrypt-all))
    (defun ac/org-decrypt-after-save-off ()
      (remove-hook 'after-save-hook #'ac/org-decrypt-all)))

  (add-hook 'org-mode-hook #'my-org-hook)

  (use-package ob-ipython
    :defer t
    :config
    (defun kill-ihaskell ()
      "IHaskell dies after a few evaluations of a big notebook due
to keeping too many files open. This cleans things up so
evaluation may begin anew."
      (interactive)
      (mapc #'kill-buffer '("*Python*" "*ob-ipython-client-driver*"
                            "*ob-ipython-kernel-default*"))))


  ;; (org-babel-do-load-languages
  ;;  'org-babel-load-languages
  ;;  '((haskell . t)
  ;;    ;; (ditaa . t)
  ;;    (shell . t)
  ;;    (emacs-lisp . t)
  ;;    (octave . t)
  ;;    ;; (C . t)
  ;;    ;; (js . t)
  ;;    ;; (maxima . t)
  ;;    (latex . t)
  ;;    (dot . t)))
  (use-package ob-shell
    :defer t
    ; :ensure org-plus-contrib
    :commands (org-babel-execute:sh
               org-babel-expand-body:sh
               org-babel-execute:bash
               org-babel-expand-body:bash
               org-babel-execute:shell
               org-babel-expand-body:shell))
  (use-package ob-haskell
    :defer t
    ; :ensure org-plus-contrib
    :commands (org-babel-execute:haskell org-babel-expand-body:haskell))

  (use-package ob-ledger
    :defer t
    :commands (org-babel-execute:ledger))

  (use-package ob-sqlite
    :defer t
    :commands (org-babel-execute:sqlite org-babel-expand-body:sqlite))

  (use-package ob-nim
    :defer t
    :commands (org-babel-execute:nim org-babel-expand-body:nim))

  (use-package ob-js
    :defer t
    :commands (org-babel-execute:js org-babel-expand-body:js))

  (use-package ob-python
    :defer t
    :commands (org-babel-execute:python org-babel-expand-body:python)
    :config
    (setq org-babel-python-command "python3"))

  (defun org-babel-execute:runhaskell (body params)
    (org-babel-eval "runhaskell"
                    (org-babel-expand-body:generic body params)))
  (add-to-list 'org-src-lang-modes '("runhaskell" . haskell))

  (defun org-babel-execute:nix-shell (body params)
    (let* ((pkgs (if (null (assq :packages params))
                     ""
                   (concat " -p " (cdr (assq :packages params)))))
           (cmd (concat "nix-shell" pkgs " --run")))
      (message "Going to run: %s %s" cmd (quote-shell-string (org-babel-expand-body:generic body params)))
      (org-babel-eval (concat "nix-shell" pkgs " --run bash")
                       (org-babel-expand-body:generic body params))))

  (add-to-list 'org-src-lang-modes '("nix-shell" . sh))
  (add-to-list 'org-src-lang-modes '("dhall" . dhall))
  (add-to-list 'org-src-lang-modes '("rust" . rustic))

  (use-package ob-emacs-lisp
    :defer t
    ; :ensure org-plus-contrib
    :commands (org-babel-execute:elisp
               org-babel-expand-body:elisp
               org-babel-execute:emacs-lisp
               org-babel-expand-body:emacs_lisp))
  (use-package ob-org
    :defer t
    :commands (org-babel-execute:org org-babel-expand-body:org))
  (use-package ob-octave
    :defer t
    ; :ensure org-plus-contrib
    :commands (org-babel-execute:octave))
  (use-package ob-latex
    :defer t
    ; :ensure org-plus-contrib
    :commands (org-babel-execute:latex org-babel-expand-body:latex))
  (use-package ob-dot
    :defer t
    ; :ensure org-plus-contrib
    :commands (org-babel-execute:dot org-babel-expand-body:dot))
  (use-package ob-gnuplot
    :defer t
    :commands (org-babel-execute:gnuplot org-babel-expand-body:gnuplot))
  (use-package ob-R
    :defer t
    :commands (org-babel-execute:R org-babel-expand-body:R))
  (use-package ob-rust
    :defer t
    :commands (org-babel-execute:rustic))
  (use-package ob-awk
    :defer t
    :commands (org-babel-execute:awk org-babel-expand-body:awk))
  (use-package ob-plantuml
    :defer t
    :commands (org-babel-execute:plantuml org-babel-expand-body:plantuml)
    :config
      :config
  (defun org-babel-execute:plantuml (body params)
    "Execute a block of plantuml code with org-babel.
This function is called by `org-babel-execute-src-block'."
    (let* ((out-file (or (cdr (assq :file params))
                         (error "PlantUML requires a \":file\" header argument")))
           (cmdline (cdr (assq :cmdline params)))
           (in-file (org-babel-temp-file "plantuml-"))
           (java (or (cdr (assq :java params)) ""))
           (full-body (org-babel-plantuml-make-body body params))
           (cmd (concat "plantuml "
                        (if (string= (file-name-extension out-file) "png")
                            " -tpng" "")
                        (if (string= (file-name-extension out-file) "svg")
                            " -tsvg" "")
                        (if (string= (file-name-extension out-file) "eps")
                            " -teps" "")
                        (if (string= (file-name-extension out-file) "pdf")
                            " -tpdf" "")
                        (if (string= (file-name-extension out-file) "tex")
                            " -tlatex" "")
                        (if (string= (file-name-extension out-file) "vdx")
                            " -tvdx" "")
                        (if (string= (file-name-extension out-file) "xmi")
                            " -txmi" "")
                        (if (string= (file-name-extension out-file) "scxml")
                            " -tscxml" "")
                        (if (string= (file-name-extension out-file) "html")
                            " -thtml" "")
                        (if (string= (file-name-extension out-file) "txt")
                            " -ttxt" "")
                        (if (string= (file-name-extension out-file) "utxt")
                            " -utxt" "")
                        " -p " cmdline " < "
                        (org-babel-process-file-name in-file)
                        " > "
                        (org-babel-process-file-name out-file))))
      (with-temp-file in-file (insert full-body))
      (message "%s" cmd) (org-babel-eval cmd "")
      nil)))
  (use-package ob-calc
    :defer t
    :commands (org-babel-execute:calc org-babel-expand-body:calc))
  (use-package ob-maxima
    :defer t
    :commands (org-babel-execute:maxima org-babel-expand-body:maxima))
  (use-package ob-C
    :defer t
    ; :ensure org-plus-contrib
    :commands (org-babel-execute:C org-babel-expand-body:C
               org-babel-execute:C++ org-babel-expand-body:C++)
    :config
    (when (memq window-system '(mac ns))
      (setq org-babel-C++-compiler "clang++")))
  (use-package ob-http
    :defer t
    :commands (org-babel-execute:http org-babel-expand-body:http))

  ;; Syntax highlight dot source blocks
  ; (set-alist 'org-src-lang-modes "dot" 'graphviz-dot)

  ;; Org sets the block face to a hard-to-read gray color by default.
  ;; (set-face-attribute
  ;;  'org-block nil :foreground (face-attribute 'default :foreground))

  ;; Disable variable-pitch-mode in tables. We used to be
  ;; able to disable this in src blocks, but this no
  ;; longer works.
  ;; (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  ;; (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
  ;; (set-face-attribute 'org-block nil :inherit 'fixed-pitch)

  ;; (set-face-attribute 'org-block nil :background "#323232")
  (set-face-attribute 'org-block nil
                      :background "#161616"
                      ;; :foreground "systemBrownColor"
                      ;; :foreground "DarkOrange"
                      )

  ;; display/update images in the buffer after I evaluate
  (add-hook 'org-babel-after-execute-hook
            'org-display-inline-images
            'append)

  (defun my/org-babel-next-src-block ()
    "Move point to the next babel src block. Returns the new point
location if there is a next src block; returns nil otherwise."
    (condition-case nil
        (org-babel-next-src-block)
      (user-error nil)))

  (defun my/org-execute-up-to-point ()
    "Execute every ipython source block whose :results are set to
silent between the beginning of the file and the current point
location."
    (interactive)
    (save-excursion
      (let ((stop (point)))
        (progn
          (goto-char (point-min))
          (let ((pt (my/org-babel-next-src-block)))
            (cl-loop until (or (null pt) (> pt stop)) do
                  (let ((info (org-babel-get-src-block-info 't)))
                    (when (and (string-equal "ipython" (nth 0 info)) ; language
                               (string-equal "silent"
                                             (assoc-default
                                              :results
                                              (nth 2 info) ; header-arguments-alist
                                              nil ""))
                               (not (string-match "^module " (nth 1 info))))
                      (progn (message "Executing %s block at line %s"
                                      (nth 0 info)
                                      (line-number-at-pos pt))
                             (org-babel-execute-src-block))))
                  (setq pt (my/org-babel-next-src-block))))))))

  (defun my/org-execute-session ()
    "Execute every org src block with a :session header up to point."
    (interactive)
    (save-excursion
      (let ((stop (point)))
        (goto-char (point-min))
        (let ((pt (my/org-babel-next-src-block)))
          (cl-loop until (or (null pt) (> pt stop)) do
                   (let* ((info (org-babel-get-src-block-info 't))
                          (sess (assoc :session (nth 2 info))))
                     (when (and (consp sess)
                                (or (not (stringp (cdr sess))) 
                                    (not (string-equal "none" (cdr sess)))))
                       (progn
                         (message "Executing %s block at line %s"
                                  (nth 0 info) (line-number-at-pos pt))
                         (org-babel-execute-src-block))))
                (setq pt (my/org-babel-next-src-block)))))))

  ;; Adapted from
  ;; http://emacs.stackexchange.com/questions/3374/set-the-background-of-org-exported-code-blocks-according-to-theme
  (defun my/org-inline-css-hook (exporter)
    "Insert custom inline css to automatically set the background
of code to whatever theme I'm using's background"
    (when (eq exporter 'html)
      (let* ((my-pre-bg (face-background 'default))
             (my-pre-fg (face-foreground 'default)))
        (setq
         org-html-head-extra
         (concat
          org-html-head-extra
          (format "<style type=\"text/css\">\n pre.src {background-color: %s; color: %s; overflow: scroll;} body { max-width: 600pt; margin: auto} </style>\n"
                  my-pre-bg my-pre-fg))))))

  ;; (add-hook 'org-export-before-processing-hook 'my/org-inline-css-hook)

  ;; Use fixed-width fonts where appropriate
  ;; From: https://yoo2080.wordpress.com/2013/05/30/monospace-font-in-tables-and-source-code-blocks-in-org-mode-proportional-font-in-other-parts/
  ;; (defun adjoin-to-list-or-symbol (element list-or-symbol)
  ;;   (require 'cl)
  ;;   (adjoin element (if (not (listp list-or-symbol))
  ;;                       (list list-or-symbol)
  ;;                     list-or-symbol)))
  ;; (mapc (lambda (face)
  ;;          (set-face-attribute face nil
  ;;                              :inherit (adjoin-to-list-or-symbol
  ;;                                         'fixed-pitch
  ;;                                         (face-attribute face :inherit))))
  ;;        ;(list 'org-code 'org-block 'org-table 'org-block-background)))
  ;;        (list 'org-code 'org-block 'org-table))

  ;; LaTeX export
  ;; (require 'ox-latex)
  (setq org-latex-pdf-process '("latexmk -g -xelatex -shell-escape %f -outdir=$(echo '%o' | sed 's|\\(.*\\)/$|\\1|g')"))
  ;; (setq org-latex-pdf-process '("latexmk -g -lualatex -shell-escape %f -outdir=$(echo '%o' | sed 's|\\(.*\\)/$|\\1|g')"))

  ;; Remove the grffile package as it broke image inclusion for me
  (setq org-latex-default-packages-alist '(("AUTO" "inputenc" t)
                                           ("T1" "fontenc" t)
                                           ;; ("" "fixltx2e" nil)
                                           ("" "graphicx" t)
                                           ("" "longtable" nil)
                                           ("" "wrapfig" nil)
                                           ("" "rotating" nil)
                                           ("normalem" "ulem" t)
                                           ("" "amsmath" t)
                                           ("" "textcomp" t)
                                           ("" "amssymb" t)
                                           ("" "capt-of" nil)
                                           ;; ("colorlinks=true" "hyperref" nil)
                                           ("" "hyperref" nil)
                                           ))

  ;; (setq org-latex-listings 'minted)
  ;; (add-to-list 'org-latex-packages-alist '("" "minted"))
  ;; (add-to-list 'org-latex-minted-langs '(haskell "haskell"))

  ;; mathescape permits math-mode in comments, while escapeinside
  ;; specifies brackets within which math-mode can be enabled in code
  ;; listings.
  (setq org-latex-minted-options
        '(("escapeinside" "||") ("mathescape=true")))
  ;; (add-to-list 'org-latex-packages-alist '("" "listings"))
  ;; (add-to-list 'org-latex-packages-alist '("" "color"))

  ;; (require 'org-clock)
  ;; (add-to-list
  ;;  'org-clock-clocktable-language-setup
  ;;  '("en" "File"     "L"  "Timestamp"  "Task" "Time"  "ALL"   "Total time"   "File time" "Time Sheet at"))

  ;; (setq org-agenda-prefix-format
  ;;       '((agenda . " %i %-12:c%?-12t% s")
  ;;         (timeline . "  % s")
  ;;         (todo . " %i %b%-12:c")
  ;;         (tags . " %i %-12:c")
  ;;         (search . " %i %-12:c")))

;;;; Blog Publishing
  (defun org-custom-link-blog-follow (path)
    (org-open-file-with-emacs path))

  (defun org-custom-link-blog-export (path desc format)
    (cond
     ((eq format 'html)
      (format "<a href=\"https://www.arcadianvisions.com/%s.html\">%s</a>"
              (file-name-sans-extension path)
              desc))))

  (defun my/blog-get-article-slug ()
    "Return an Org item based on the current buffer suitable for
insertion into the blog's index."
    (if (not (eq major-mode 'org-mode))
        (message "Only works in an Org buffer")
      (let* ((title (substring-no-properties (car (plist-get (org-export-get-environment) :title))))
             (rel-path (progn
                         (string-match ".*?/articles/\\(.*?\\)$" (buffer-file-name))
                         (match-string 1 (buffer-file-name))))
             (rel-html (concat (file-name-sans-extension rel-path) ".html")))
        (concat "* " title "\n"
                ":PROPERTIES:\n:RSS_PERMALINK: " rel-html "\n:END:"
                "#+include: \"" rel-path "\"::Slug\n\n"
                "[[blog:" rel-path "][read more]]"))))

  (defun buffer-for-file (filename)
    "Return an existing buffer visiting `FILENAME`, or open a new
buffer visiting `FILENAME` if none exists."
    (or (get-file-buffer filename) (find-file filename)))

  (defun my/blog-add-article-to-index ()
    "Add the current Org buffer as an entry in the blog's index."
    (interactive)
    (save-current-buffer
      (let* ((entry (my/blog-get-article-slug))
             (index-dir (locate-dominating-file (buffer-file-name) "index.org"))
             (index-buf (buffer-for-file (concat index-dir "index.org"))))
        (with-current-buffer index-buf
          (save-excursion
            (goto-char (point-min))
            (search-forward-regexp "^*")
            (forward-line -1)
            (insert "\n" entry "\n"))))))

  (defun new-blog-article (arg title)
    "Produce the boilerplate at the start of every blog article after
prompting for the article's title."
    (interactive "P\nMtitle: ")
    (let* ((date (format-time-string "%Y-%m-%d" (current-time)))
           (txt (mapconcat #'identity
                           (list (concat "#+TITLE: " title)
                                 (concat "#+DATE: <" date ">")
                                 "#+OPTIONS: html-postamble:nil num:nil toc:nil"
                                 ""
                                 "#+BEGIN_EXPORT html"
                                 (concat "<p class=\"date\">" date "</p>")
                                 "#+END_EXPORT"
                                 ""
                                 "* Slug :ignore:"
                                 "")
                           "\n")))
      (insert txt)))

  (org-link-set-parameters
   "blog"
   :follow #'org-custom-link-blog-follow
   :export #'org-custom-link-blog-export)

  (setq org-rss-use-entry-url-as-guid nil)
  (defvar my/blog-directory
    (let ((d1 "~/Documents/Projects/Blog")
          (d2 "~/Projects/Blog"))
      (if (file-exists-p d1) d1 d2))
    "Local directory for blog files")

  (defun my/blog-copy-index-to-rss (_)
    (shell-command (format "(cd %s/blog && cp index.xml rss.xml && nix-shell -p gnused --run \"sed 's/index.xml/rss.xml/' -i ./rss.xml\")" my/blog-directory))
    (shell-command (format "cd %s/blog/blog && cp ../rss.xml ." my/blog-directory)))
  (defun my/blog-sync-assets (_)
    (shell-command (format "rsync -a %s/blog/assets/basedir/ %s/blog" my/blog-directory my/blog-directory)))
  (setq org-publish-project-alist
        `(("blog-content"
           :base-directory ,(concat my/blog-directory "/articles/")
           :publishing-directory ,(concat my/blog-directory "/blog/")
           :publishing-function org-html-publish-to-html
           :export-babel-evaluate nil
           :exclude "2019/subt"
           :recursive t
           ;; :auto-sitemap t
           ;; :sitemap-filename "index.html"
           ;; :sitemap-title "Arcadian Visions Blog"
           ;; :makeindex t
           :htmlized-source t
           :with-author "Anthony Cowley"
           :email "acowley@gmail.com"
           :with-creator nil
           :with-date nil
           :with-email "acowley@gmail.com"
           :with-timestamps nil
           :with-toc nil
           :section-numbers nil
           :html-head-include-default-style nil
           :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"../core-style.css\" />"
           :html-postamble "")
          ("blog-tufte"
           :base-directory ,(concat my/blog-directory "/articles")
           :publishing-directory ,(concat my/blog-directory "/blog/")
           :publishing-function org-html-publish-to-tufte-html
           :org-tufte-include-footnotes-at-bottom nil
           :recursive t
           :exclude ,(rx line-start "201" (not (any ?9)) "/" (* not-newline))
           :htmlized-source t
           :with-creator nil
           :with-date nil
           :with-email nil
           :with-timestamps nil
           :with-toc nil
           :section-numbers nil
           :html-head-include-default-style nil
           ;; :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"../core-style.css\" />"
           ;; :html-postamble ""
           )
          ("blog-rss"
           :base-directory ,(concat my/blog-directory "/articles/")
           :publishing-directory ,(concat my/blog-directory "/blog")
           :publishing-function (org-rss-publish-to-rss)
           :html-link-home "http://www.arcadianvisions.com/"
           :completion-function my/blog-copy-index-to-rss
           :html-link-use-abs-url t
           :exclude ".*"
           :include ("index.org")
           :author "Anthony Cowley"
           :with-toc nil
           :with-creator nil
           :with-author "Anthony Cowley"
           :email "acowley@gmail.com"
           :with-email "acowley@gmail.com"
           :section-numbers nil)
          ("blog-assets"
           ;; Static content like images and CSS
           :base-directory ,(concat my/blog-directory "/assets")
           :base-extension any
           :include ("basedir/.htaccess")
           :recursive t
           :publishing-directory ,(concat my/blog-directory "/blog/assets")
           :publishing-function org-publish-attachment
           :completion-function my/blog-sync-assets)
          ("blog" :components ("blog-content" "blog-rss" "blog-assets"))))

  ;;; org-noter
  (use-package org-noter :defer t :commands (org-noter))

  ;;; org-noter-pdftools
  (use-package org-noter-pdftools
    :after org-noter
    :config
    (with-eval-after-load 'pdf-annot
      (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))

  ;;; org-pdftools
  (use-package org-pdftools
    :after org-noter
    :config
    (with-eval-after-load 'org (org-pdftools-setup-link)))

;;;; org-clock

(defun my-org-clocktable-notodo (ipos tables params)
  "Remove the TODO and DONE keywords from clock table
entries. From
http://emacs.stackexchange.com/questions/8228/remove-task-state-keywords-todo-done-from-clocktable-reports"
  (cl-loop for tbl in tables
           for entries = (nth 2 tbl)
           do (cl-loop for entry in entries
                       for headline = (nth 1 entry)
                       do (setq headline (replace-regexp-in-string "TODO \\|DONE " "" headline))
                       do (setcar (nthcdr 1 entry) headline)))
  (org-clocktable-write-default ipos tables params))

;;;; Project Task Capture

;; I use a convention where projects have a ProjectName-notes.org file
;; in the project root directory. This file is used for design notes
;; and task lists. It can be good to setq `org-agenda-files' to
;; include all your active projects so that the tasks show up in the
;; org agenda view. I set this value in the
;; [[%3B%3B%3B%20Private%20Configuration][Private Configuration]]
;; section of this file.

;; With the given configuration "C-c c p" adds a TODO item to the
;; current project's notes file.
(defun find-project-notes ()
  "A project's notes file is defined as ProjectName-notes.org in
  the project root directory."
  (concat (projectile-project-root) (projectile-project-name) "-notes.org"))

(setq org-capture-templates
      '(("t" "Task" entry (file+headline org-default-notes-file "Tasks")
         "* TODO %?\n  SCHEDULED: %t\n%i\n")
        ("p" "Project Task" entry (file+headline (find-project-notes) "Tasks")
         "* TODO %?\n  %i\n  %a")
        ("s" "Serve Robotics Task" entry
         (file+function "~/org/serve.org" (lambda ()
                                            (let ((headline (format-time-string "%Y %B" (current-time))))
                                              (condition-case nil
                                                  (goto-char (org-find-olp (list headline) t))
                                                (error (progn
                                                         (goto-char (point-min))
                                                         (org-insert-heading)
                                                         (insert headline)))))))
         "* TODO %?\n:PROPERTIES:\n:opened: %U\n:END:\n"))))
;;;; org-roam
(use-package org-roam
  ;; :defer 5
  :after org
  :commands (org-roam-node-find)
  :init
  (setq org-roam-v2-ack t)
  (setq org-roam-database-connector 'sqlite-builtin)
  :bind
  (("C-c r l" . org-roam-buffer-toggle)
   ("C-c r f" . org-roam-node-find)
   ;; ("C-c r g" . org-roam-show-graph)
   :map org-mode-map (("C-c r i" . org-roam-node-insert)))
  ;; :bind (:map org-roam-mode-map
  ;;             (("C-c n l" . org-roam)
  ;;              ("C-c n f" . org-roam-find-file)
  ;;              ("C-c n g" . org-roam-show-graph))
  ;;       :map org-mode-map
  ;;            (("C-c n i" . org-roam-insert)))
  :custom
  (org-roam-capture-templates
   '(("d" "default" plain "%?" :target
      (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}
")
      :unnarrowed t)
     ("s" "Serve Robotics Note" plain
      "%?"

      ;; :if-new (file+head "serve/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: serve\n")
      :target (file+head "serve/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: serve\n")
      :unnarrowed t)))
  :config
  (setq org-roam-directory "~/org/roam" 
        org-roam-graphviz-executable "dot")
  (require 'org-roam-protocol)
  (require 'org-roam-graph)
  (setq org-roam-graph-link-hidden-types '("file" "http" "https"))
  ;; Speeds up slow org-roam db updates
  ;; (advice-add 'org-roam-db-update-file :around
  ;;             (defun +org-roam-db-update-file (fn &rest args)
  ;;               (emacsql-with-transaction (org-roam-db)
  ;;                 (apply fn args))))
  (org-roam-db-autosync-mode)
  ;; (org-roam-setup)


  ;; The rest of the org-roam configuration is from
  ;; https://www.reddit.com/r/OrgRoam/comments/or31g0/a_few_qol_tricks_i_havent_seen_much_of_on_the/
  (setq org-roam-node-display-template
        (concat "${backlinkscount:16} " "${functiontag:16} " "${othertags:13} " "${hierarchy:183}"))

  ;; From https://github.com/hieutkt/.doom.d/blob/master/config.el#L690-L745 or
  ;; https://orgroam.slack.com/archives/CV20S23C0/p1626662183035800
  
  (require 'all-the-icons)

  (defvar my/roam-special-tags '("serve")
    "A list of org-roam tags treated specially by customized org-roam-node-find")

  (cl-defmethod org-roam-node-filetitle ((node org-roam-node))
    "Return the file TITLE for the node."
    (org-roam-get-keyword "TITLE" (org-roam-node-file node)))

  (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node))
    (let* ((count (caar (org-roam-db-query
                         [:select (funcall count source)
                                  :from links
                                  :where (= dest $s1)
                                  :and (= type "id")]
                         (org-roam-node-id node)))))
      (if (> count 0)
          (concat (propertize "=has:backlinks=" 'display
                              (all-the-icons-material "link" :face 'all-the-icons-dblue :height 0.9))
                  (format "%d" count))
        (concat (propertize "=not-backlinks=" 'display
                            (all-the-icons-material "link" :face 'org-roam-dim :height 0.9))
                " "))))

  (cl-defmethod org-roam-node-functiontag ((node org-roam-node))
    "The first tag of notes are used to denote note type"
    (let* ((specialtags my/roam-special-tags)
           (tags (seq-filter (lambda (tag) (not (string= tag "ATTACH")))
                             (org-roam-node-tags node)))
           (functiontag (seq-intersection specialtags tags 'string=)))
      (concat
       ;; (if functiontag
       ;;     (propertize "=has:functions=" 'display (all-the-icons-octicon "gear" :face 'all-the-icons-silver :v-adjust 0.02 :height 0.8))
       ;;   (propertize "=not-functions=" 'display (all-the-icons-octicon "gear" :face 'org-roam-dim :v-adjust 0.02 :height 0.8))
       ;;   )
       (if functiontag
           (propertize "=@=" 'display
                       (all-the-icons-faicon "tags" :face 'all-the-icons-dgreen :v-adjust 0.02 :height 0.7))
         (propertize "= =" 'display
                     (all-the-icons-faicon "tags" :face 'all-the-icons-dgreen :v-adjust 0.02 :height 0.7)))
       " "
       (string-join functiontag ", "))))

  (cl-defmethod org-roam-node-othertags ((node org-roam-node))
    "Return the file TITLE for the node."
    (let* ((tags (seq-filter (lambda (tag) (not (string= tag "ATTACH")))
                             (org-roam-node-tags node)))
           (specialtags my/roam-special-tags)
           (othertags (seq-difference tags specialtags 'string=)))
      (concat
       ;; " "
       ;; (if othertags
       ;;     (propertize "=has:tags=" 'display (all-the-icons-faicon "tags" :face 'all-the-icons-dgreen :v-adjust 0.02 :height 0.8))
       ;;   (propertize "=not-tags=" 'display (all-the-icons-faicon "tags" :face 'all-the-icons-dgreen :v-adjust 0.02 :height 0.8))
       ;;   )
       ;; " "
       (if othertags
           (propertize "=@=" 'display "")
         (propertize "= =" 'display ""))
       (propertize (string-join othertags ", ") 'face 'all-the-icons-dgreen))))

  (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
    "Return the hierarchy for the node."
    (let* ((title (org-roam-node-title node))
           (olp (mapcar (lambda (s) (if (> (length s) 10) (concat (substring s 0 10)  "...") s))
                        (org-roam-node-olp node)))
           (level (org-roam-node-level node))
           (filetitle (org-roam-get-keyword "TITLE" (org-roam-node-file node)))
           (shortentitle (if (> (length filetitle) 20)
                             (concat (substring filetitle 0 20)  "...")
                           filetitle))
           (separator (concat " " (all-the-icons-material "chevron_right") " ")))
      (cond
       ((>= level 1) (concat (propertize (format "=level:%d=" level) 'display
                                         (all-the-icons-material "list" :face 'all-the-icons-blue))
                             " "
                             (propertize shortentitle 'face 'org-roam-dim)
                             (propertize separator 'face 'org-roam-dim)
                             title))
       (t (concat (propertize (format "=level:%d=" level) 'display
                              (all-the-icons-material "insert_drive_file" :face 'all-the-icons-yellow))
                  " "
                  title))))))

;;;; org-roam-bibtex
(use-package org-roam-bibtex
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :commands (org-roam-bibtex-notes-fn
             org-roam-bibtex-edit-notes-ad
             org-roam-bibtex-process-file-field
             org-roam-bibtex-edit-notes
             org-roam-bibtex-find-non-ref-file
             org-roam-bibtex-insert-non-ref))

;;;; org-roam-ui
(use-package org-roam-ui
  :after org-roam
  :commands (org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
;;;; org-marginalia
(use-package org-marginalia
  :after org
  :commands (org-marginalia-mode org-marginalia-mark org-marginalia-open)
  :bind (:map org-marginalia-mode-map
              (("C-c M" . org-marginalia-make-annotation)
               ("C-c m o" . org-marginalia-open)
               ("C-c m ]" . org-marginalia-browse-forward)
               ("C-c m [" . org-marginalia-browse-backward)))
  :custom-face (org-marginalia-highlighter ((t (;; :background "dark olive green" 
                                                            :underline t))))
  :config
  (defun org-marginalia-make-annotation ()
    (interactive)
    (let ((mark-end (region-end)))
      (org-marginalia-mark (region-beginning) (region-end))
      (org-marginalia-save)
      (org-marginalia-open (1- mark-end))
      (end-of-buffer)))

  (defun org-marginalia-browse-forward ()
    (interactive)
    (let ((buf (current-buffer)))
      (org-marginalia-next) (org-marginalia-open (point))
      (pop-to-buffer buf nil t)))

  (defun org-marginalia-browse-backward ()
    (interactive)
    (let ((buf (current-buffer)))
      (org-marginalia-prev) (org-marginalia-open (point))
      (pop-to-buffer buf nil t))))

;;;; org-ref
(use-package org-ref
  :disabled t
  :defer t
  :bind (:map org-mode-map 
              (("C-c C-r" . org-ref-helm-insert-cite-link)))
  :config
  (setq ;; org-ref-bibliography-notes "~/Dropbox/bibliography/notes.org"
   org-ref-default-bibliography '("~/Documents/MyPapers/mybib/mybib.bib")
   org-ref-pdf-directory "~/org/roam/references"))
;;;; bibtex-completion
(use-package bibtex-completion
  :after org-ref
  :config
  (setq bibtex-completion-bibliography '("~/Documents/MyPapers/mybib/mybib.bib")))

;;;; doi-utils
(use-package doi-utils
      :commands (doi-utils-add-bibtex-entry-from-doi
                 doi-utils-insert-bibtex-entry-from-doi
                 doi-utils-get-bibtex-entry-pdf
                 doi-utils-update-bibtex-entry-from-doi))

;;;; org-ref-arxiv
(use-package org-ref-arxiv
  :commands (arxiv-add-bibtex-entry
             arxiv-get-pdf
             arxiv-get-pdf-add-bibtex-entry))

;;;; outorg
(use-package outorg
  :defer t
  :commands (outorg-edit-as-org)
  :config
  (defun outorg-whole-file ()
  "Call `outorg-edit-as-org` with a prefix argument so that the
entire source file is loaded."
    (interactive)
    (outorg-edit-as-org '(4))))

;;;; outshine
(use-package outshine
  :defer t
  :commands (outshine-mode)
  ;; :init
  ;; (add-hook 'outline-minor-mode-hook #'outshine-hook-function)
  ;; (add-hook 'prog-mode-hook #'outline-minor-mode)
  :config
  (setq outshine-preserve-delimiter-whitespace t
        outshine-use-speed-commands t))

;; Copy from an Org buffer to the system clipboard after converting
;; the Org content to rich text format.
;; (use-package ox-clip
;;   :defer t
;;   :commands (ox-clip-formatted-copy))


;;;; org-mime

(use-package org-mime
  :defer t
  :commands (org-mime-org-buffer-htmlize org-mime-org-subtree-htmlize))

;;;; org-journal
(use-package org-journal
  :defer t
  :commands (org-journal-new-entry
             org-journal-mode
             org-journal-new-date-entry
             org-journal-new-scheduled-entry
             org-journal-list-dates
             org-journal-mark-entries
             org-journal-read-entry
             org-journal-display-entry
             org-journal-read-or-display-entry
             org-journal-next-entry
             org-journal-previous-entry
             org-journal-search)
  :bind (("C-c C-j" . org-journal-new-entry)
         ("C-c j" . org-journal-new-entry)))

;;;; org-ql
(use-package org-ql
  :commands (org-ql-query org-ql-search org-ql-find)
  :config
  (require 'org-ql-find)
  (require 'org-ql-search)
  (require 'org-ql-view))
;;;; org-tidy
(use-package org-tidy
  :commands (org-tidy-mode org-tidy-toggle)
  ;;; This slows down the loading of large org-mode files
  ;; :hook (org-mode . org-tidy-mode)
  )
;;;; org-bookmark-heading
(use-package org-bookmark-heading
  :after org
  :defer nil)
;;; alert
(use-package alert
  :commands alert
  :config
  (setq alert-default-style (if (memq window-system '(mac ns))
                                'notifier
                              'notifications)))
;;; org-clock-reminder
(use-package org-clock-reminder
  :disabled t
  :after org
  :config
  (setq org-clock-reminder-remind-inactivity 't)
  (org-clock-reminder-activate))
;;; elegant-agenda
(use-package elegant-agenda-mode 
  :hook org-agenda-mode
  :disabled
  :init
  (defun air-org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.

PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))
  (setq org-agenda-custom-commands
      '(("d" "Today"
         (;; (tags-todo "SCHEDULED<\"<+1d>\"&PRIORITY=\"A\""
          ;;            ((org-agenda-skip-function
          ;;              '(org-agenda-skip-entry-if 'todo 'done))
          ;;             (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (tags-todo "PRIORITY=\"A\""
                     ((org-agenda-skip-function
                       '(org-agenda-skip-entry-if 'todo 'done))
                      (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (agenda "" ((org-agenda-span 'day)
                      (org-scheduled-delay-days -14)
                      (org-agenda-overriding-header "Schedule")))
          (tags-todo "SCHEDULED<\"<+1d>\""
                     ((org-agenda-skip-function
                       '(or (org-agenda-skip-entry-if 'done)
                            (air-org-skip-subtree-if-priority ?A)))
                      (org-agenda-overriding-header "Tasks:"))))))))
;;; org-books
(use-package org-books
  :commands (org-books-add-book
             org-books-rate-book
             org-books-cliplink
             org-books-add-url
             org-books-add-isbn
             org-books-all-authors)
  :custom
  (org-books-file "~/org/home.org")
  :init
  (defun my/add-org-book (title author)
    "Add a book (specified by TITLE and AUTHOR) to the `org-books-file::BOOKS' heading. If a prefix argument is given, the book is added to the `org-books-file::Owen's Books` heading.'"
    (interactive
     (let ((completion-ignore-case t))
       (list
        (read-string "Book Title: ")
        (completing-read "Author: " (org-books-all-authors)))))
    (if org-books-file
        (save-excursion
          (with-current-buffer (find-file-noselect org-books-file)
            (let ((pos (org-find-exact-headline-in-buffer
                        (if (null current-prefix-arg) "Books" "Owen's Books")
                        (current-buffer) t)))
              (if pos
                  (org-books--insert-at-pos pos title author nil)
                (message "Couldn't find `Books' header")))))
      (message "org-books-file not set"))))
;;; olivetti-mode
(use-package olivetti
  :commands (olivetti-mode)
  :custom (olivetti-body-width 90)
  :defer t)
;;; pdf-tools
(use-package pdf-tools
  :magic ("%PDF" . pdf-view-mode)
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :config
  (use-package pdf-occur
    :commands (pdf-occur-global-minor-mode))
  (use-package pdf-history
    :commands (pdf-history-minor-mode))
  (use-package pdf-links
    :commands (pdf-links-minor-mode))
  (use-package pdf-outline
    :commands (pdf-outline-minor-mode))
  (use-package pdf-annot
    :commands (pdf-annot-minor-mode))
  (use-package pdf-sync
    :commands (pdf-sync-minor-mode))
  ;; If pdf-tools is installed using emacsWithPackage in nix, then the
  ;; `epdfinfo` binary is installed alongside the elisp package.
  (setq pdf-info-epdfinfo-program
        (concat (file-name-directory (locate-library "pdf-tools"))
                "epdfinfo")
        pdf-info-epdfinfo-error-filename nil)
  (pdf-tools-install))
;;; Helm
(use-package helm
  :disabled
  :defer 1
  ;; :diminish helm-mode
  :commands (helm-find-files helm-mini helm-M-x helm-imenu helm-mode)
  :bind (("M-x" . helm-M-x)
         ("C-c h" . helm-mini)
         ;; ("C-c i" . helm-imenu)
         ;; ("C-c C-i" . helm-imenu)
         ;; ("C-x C-f" . helm-find-files)
         :map helm-map
         ;; use TAB for action
         ("<tab>" . helm-execute-persistent-action)
         ;; make TAB work in terminal
         ("C-i" . helm-execute-persistent-action)
         ;; list actions
         ("C-z" . helm-select-action))
  :config
  ;; Helm locks up when ligatures are enabled
  (add-hook 'helm-major-mode-hook
          (lambda ()
            (setq auto-composition-mode nil)))
  (setq
   helm-always-two-windows t
   helm-candidate-number-limit 100

   ;; This sometimes looks slick, but the new frame doesn't stand out
   ;; from the existing frame very well, and having the frame pop up
   ;; at point means that you need to be looking at point rather than
   ;; at a window split.
   ;; helm-display-function #'helm-display-buffer-in-own-frame

   helm-quick-update t
   helm-M-x-requires-pattern 3        ; Require at least one character
   helm-ff-file-name-history-use-recentf t
   helm-ff-skip-boring-files t

                                        ; helm-idle-delay 0.0
                                        ; helm-input-idle-delay 0.01

   ;; Use Spotlight on OS X to find files
   helm-mini-default-sources '(helm-source-buffers-list
                               helm-source-recentf
                               helm-source-buffer-not-found
                               helm-source-locate))
  (setq helm-locate-command
        (cond
         ((memq window-system '(mac ns))
          "mdfind -onlyin $HOME -name %s %s | grep -E -v '/dist/|/Caches/'")
         ((file-exists-p "/run/current-system/sw/bin/locate")
          "/run/current-system/sw/bin/locate %s -e -A --regex %s")
         (t "mlocate %s -e -A --regex %s")))

  (require 'helm-imenu)
  (require 'helm-command)
  (use-package helm-company
    :defer t
    :bind (:map company-mode-map
                ("C-:" . helm-company)))

  (defun my/helm-search-forward (prefix)
    "Calls `helm-swoop` unless a prefix argument is given, in which case it calls `isearch-forward`"
    (interactive "P")
    (if (null prefix)
        (helm-swoop)
      (isearch-forward)))

  (use-package helm-swoop
    :disabled
    :defer t
    :commands helm-swoop
    :bind (("M-i" . helm-swoop)
           ("C-s" . my/search-forward)
           ("M-I" . helm-swoop-back-to-last-point)))

  (use-package helm-dash
    :defer t
    :commands (projectile-helm-dash)
    :config
    (setq helm-dash-browser-func #'eww)
    (defun projectile-helm-dash ()
      "Set the helm-dash docsets path to the 'docsets' directory
under the current project's root directory."
      (interactive)
      (setq helm-dash-docsets-path (concat (projectile-project-root) "docsets"))
      (message (format "Loaded docsets for %s" (projectile-project-name)))))
  ;; (use-package helm-tramp
  ;;   :defer t
  ;;   :config
  ;;   (use-package docker-tramp))
  (use-package helm-projectile
    :disabled
    :defer t)
  (use-package wgrep-helm
    :commands (wgrep-change-to-wgrep-mode wgrep-finish-edit wgrep-helm-setup)
    :hook ((helm-moccur-mode-hook helm-grep-mode-hook) . wgrep-helm-setup)
    :bind (:map wgrep-mode-map
                ("C-x C-s" . my/wgrep-save)
                ("C-c C-e" . my/wgrep-save)
                ("C-c C-k" . my/wgrep-discard))
    :config
    (defun my/wgrep-save ()
      "Kill the buffer if it was a helm-occur result"
      (interactive)
      (wgrep-finish-edit)
      (when (eq major-mode 'helm-occur-mode)
        (kill-this-buffer)))
    (defun my/wgrep-discard ()
      "Kill the buffer if it was a helm-occur result"
      (interactive)
      (wgrep-abort-changes)
      (when (eq major-mode 'helm-occur-mode)
        (kill-this-buffer)))
    (defun my/helm-occur-hook ()
      "Switch the by-default read-only helm-occur buffer to editable"
      (interactive)
      (wgrep-change-to-wgrep-mode))
    (add-hook 'helm-occur-mode-hook #'my/helm-occur-hook))
  ;; (helm-mode 1)
  )
;; (require 'helm)
;; (helm-mode 1)
;; (ido-mode -1)

;;; helm-notmuch
(use-package helm-notmuch
  :commands (helm-notmuch))

;;; helm-org-rifle
(use-package helm-org-rifle
  :defer t
  :commands (helm-org-rifle helm-org-rifle-agenda-files)
  ;; :bind (("C-c r" . helm-org-rifle-agenda-files))
  )

;;; god-mode

(use-package god-mode
  :defer nil
  :commands (god-mode god-mode-all)
  :config
  (setq god-exempt-major-modes nil
        god-exempt-predicates nil)

  (defun ac/god-enable-on-new-buffers (&rest buffer-name)
    "Enable god-mode on new buffers if it is enabled globally."
    (when (and god-global-mode
               (not (null buffer-name))
               (string-match "^multiswitch" (car buffer-name)))
      (god-mode-activate 1)))
  (advice-add #'rename-buffer
              :after
              #'ac/god-enable-on-new-buffers
              '((name . "Set god status on new buffers")))

  (defun ac/god-toggle-on-overwrite ()
    "Toggle god-mode on overwrite-mode."
    (if (bound-and-true-p overwrite-mode)
        (god-local-mode-pause)
      (god-local-mode-resume)))

  (defun my/god-disabled-hook ()
    (setq-local cursor-type 'bar))
  (defun my/god-enabled-hook ()
    (setq-local cursor-type 'box))
  (add-hook 'god-mode-enabled-hook #'my/god-enabled-hook)
  (add-hook 'god-mode-disabled-hook #'my/god-disabled-hook)

  (add-hook 'overwrite-mode-hook #'ac/god-toggle-on-overwrite)

  :bind (("<escape>" . god-mode-all)
         ("C-x C-o" . other-window) ;; Easier to use with god-mode
         ;; I swap these becuase I use switch-to-buffer much more frequently
         ;; and prefer it to have the simpler binding.
         ("C-x b" . list-buffers)
         ;; ("C-x C-b" . switch-to-buffer)
         ;; ("C-x C-b" . helm-buffers-list)
         :map god-local-mode-map
         ("." . repeat)))

;; (global-set-key (kbd "<f9>") 'god-mode-all)
;; (define-key god-local-mode-map (kbd ".") 'repeat)
;; (global-set-key (kbd "C-x C-o") 'other-window)
;; (global-set-key (kbd "C-s") #'helm-swoop) ; instead of isearch-forward
;; (global-set-key (kbd "C-x b") #'list-buffers)
;; (global-set-key (kbd "C-x C-b") #'switch-to-buffer)


;;; Email (notmuch)
(use-package notmuch
  :commands (notmuch)
  :hook
  (notmuch-show-mode . my/notmuch-show-hook)
  (message-mode . my/message-mode-hook)
  :bind (:map notmuch-show-mode-map
              ("d" .
               (lambda ()
                 "toggle deleted tag for message"
                 (interactive)
                 (if (member "trash" (notmuch-show-get-tags))
                     (notmuch-show-tag '("-trash"))
                   (notmuch-show-tag '("+trash" "-inbox" "-unread" "-new" "-flagged")))
                 (notmuch-show-next-message)))
              ("r" . #'my-notmuch-reply-sender)
              ("R" . #'my-notmuch-reply)
              ("o" . #'org-open-at-point)
              ("l" . #'notmuch-show-jump-to-latest)
              ("a" .
               (lambda ()
                 (interactive)
                 ;; (if (member "archived" (notmuch-show-get-tags))
                 ;;     (notmuch-show-tag '("-archived"))
                 ;;   (notmuch-show-tag '("+archived" "-inbox" "-unread" "-gmail/Inbox" "-seas/Inbox" "-new")))
                 (if (member "inbox" (notmuch-show-get-tags))
                     (notmuch-show-tag '("-inbox" "-unread"))
                   (notmuch-show-tag '("+inbox")))
                 (notmuch-show-next-thread)))
              :map notmuch-search-mode-map
              ("d" .
               (lambda ()
                 (interactive)
                 (notmuch-search-tag '("+trash" "-inbox" "-unread" "-new" "-flagged"))
                 (notmuch-search-next-thread))
               ;; (lambda ()
               ;;   "toggle deleted tag for message"
               ;;   (interactive)
               ;;   (if (member "trash" (notmuch-search-get-tags))
               ;;       (notmuch-search-tag '("-trash"))
               ;;     (notmuch-search-tag '("+trash" "-inbox" "-unread" "-new")))
               ;;   (notmuch-search-next-thread))
               )
              ("a" .
               (lambda ()
                 (interactive)
                 ;; (if (member "archived" (notmuch-search-get-tags))
                 ;;     (notmuch-search-tag '("-archived"))
                 ;;   (notmuch-search-tag '("+archived" "-inbox" "-unread" "-gmail/Inbox" "-seas/Inbox" "-new")))
                 (if (member "inbox" (notmuch-search-get-tags))
                     (notmuch-search-tag '("-inbox" "-unread"))
                   (notmuch-search-tag '("+inbox")))
                 (notmuch-search-next-thread))))
  :custom
  (notmuch-search-oldest-first nil)
  (notmuch-fcc-dirs '(("acowley@gmail.com" . nil;; "gmail/sent"
                       )
                      ("acowley@seas.upenn.edu" . nil;; "seas/sent"
                       )
                      ("anthony.cowley@serverobotics.com" . nil)
                      ("acowley@scalableautonomy.com" . nil)))
  (notmuch-poll-script "~/dotfiles/notmuch-sync-new.sh")
  :custom-face
  (notmuch-search-date ((t (:foreground "SteelBlue"))))
  (notmuch-search-count ((t (:foreground "SteelBlue"))))
  ;; (notmuch-search-matching-authors ((t (:foreground "CadetBlue"))))
  (notmuch-search-matching-authors ((t (:foreground "DeepSkyBlue"))))
  ;; (notmuch-search-subject ((t (:foreground "DeepSkyBlue"))))
  (notmuch-search-subject ((t (:foreground "white"))))
  (notmuch-search-unread-face ((t (:foreground "CadetBlue"))))
  (notmuch-search-subject ((t (:family "Montserrat" :weight light :height 120 :foreground "white"))))

  :config
  (add-to-list 'notmuch-saved-searches 
               '(:name "lists" :query "tag:unread AND (tag:haskell OR tag:orgmode OR tag:rocm OR tag:wgpu OR tag:srht)" :key "l"))
  (set-face-attribute 'notmuch-search-subject nil :font "Montserrat" :weight 'normal :height 120 :foreground "gainsboro")
  (set-face-attribute 'notmuch-tag-face nil :foreground "olive drab")
  (set-face-attribute 'notmuch-search-subject nil :font "Victor Mono" :weight 'normal :height 120 :foreground "white")
  (set-face-attribute 'notmuch-search-unread-face nil :foreground "CadetBlue")

  ;; From https://www.reddit.com/r/emacs/comments/aja2ov/notmuch_thread_sort_order/eeujv47/
  (defun notmuch-show-jump-to-latest ()
    "Jump to the message in the current thread with the latest
timestamp."
    (interactive)
    (let ((timestamp 0)
          latest)
      (notmuch-show-mapc
       (lambda () (let ((ts (notmuch-show-get-prop :timestamp)))
                    (when (> ts timestamp)
                      (setq timestamp ts
                            latest (point))))))
      (if latest
          (progn
            (goto-char latest)
            (notmuch-show-message-visible (notmuch-show-get-message-properties) t)
            (recenter-top-bottom 10))
        (error "Cannot find latest message."))))
  
  (defun my/notmuch-show-hook ()
    (setq olivetti-body-width 90)
    (set-face-attribute 'variable-pitch nil :height 120 :weight 'normal)
    (variable-pitch-mode)
    (olivetti-mode)
    (set-face-attribute 'header-line nil :font "Montserrat" :height 150 :weight 'light))

  (defun my/message-mode-hook ()
    (turn-off-auto-fill)
    (turn-on-gnus-dired-mode)
    (variable-pitch-mode)
    (olivetti-mode))
  (defun my/notmuch-search-hook ()
    (setq line-spacing 0.2))
  ;; Associate firefox with the `text/html' MIME type so that typing
  ;; ".v" opens an HTML part of an email message in firefox.
  (setq mailcap-user-mime-data '(((viewer . "firefox %s") (type . "text/html"))))
  (defface notmuch-search-deleted-face
    '((t (:foreground "tomato")))
    "Face for the `deleted' tag."
    :group 'notmuch-search :group 'notmuch-faces)
  (add-to-list 'notmuch-search-line-faces '("deleted" . notmuch-search-deleted-face))
  ;; (add-to-list 'notmuch-search-line-faces '("trash" . notmuch-search-deleted-face))
  (add-hook 'notmuch-search-hook #'my/notmuch-search-hook)
  (setq user-full-name  "Anthony Cowley")
  (defun evil-collection-notmuch-toggle-tag (tag mode &optional next-function)
    "Toggle TAG tag for message in MODE."
    (let ((get (intern (format "notmuch-%s-get-tags" mode)))
          (set (intern (format "notmuch-%s-tag" mode)))
          (next (or next-function (intern (format "notmuch-%s-next-message" mode)))))
      (funcall set (list (concat (if (member tag (funcall get))
                                     "-" "+")
                                 tag)))
      (funcall next)))
  (defun evil-collection-notmuch-search-toggle-delete ()
    "Toggle deleted tag for message."
    (interactive)
    (evil-collection-notmuch-toggle-tag "deleted" "search" 'notmuch-search-next-thread))

;;;; Additional SMTP Accounts
  ;; From http://varunbpatil.github.io/2013/08/19/eom/#.VQtWSFyCZSU
  (defvar my-notmuch-account-alist
    '(("gmail"
       (user-mail-address "acowley@gmail.com")
       (smtpmail-default-smtp-server "smtp.gmail.com")
       (smtpmail-smtp-server "smtp.gmail.com")
       (smtpmail-smtp-service 587)
       (smtpmail-stream-type starttls)
       (smtpmail-smtp-user "acowley@gmail.com")
       (smtpmail-starttls-credentials '(("smtp.gmail.com" 587 "acowley@gmail.com" nil)))
       (smtpmail-auth-credentials
        '(("smtp.gmail.com" 587 "acowley@gmail.com" nil))))
      ("serve"
       (user-mail-address "anthony.cowley@serverobotics.com")
       (smtpmail-default-smtp-server "smtp.gmail.com")
       (smtpmail-smtp-server "smtp.gmail.com")
       (smtpmail-smtp-service 587)
       (smtpmail-stream-type starttls)
       (smtpmail-smtp-user "anthony.cowley@serverobotics.com")
       (smtpmail-starttls-credentials '(("smtp.gmail.com" 587 "anthony.cowley@serverobotics.com" nil)))
       (smtpmail-auth-credentials
        '(("smtp.gmail.com" 587 "anthony.cowley@serverobotics.com" nil))))
      ("upenn"
       (user-mail-address "acowley@seas.upenn.edu")
       (smtpmail-default-smtp-server "smtp.gmail.com")
       (smtpmail-smtp-server "smtp.gmail.com")
       (smtpmail-smtp-service 587)
       (smtpmail-stream-type starttls)
       (smtpmail-smtp-user "acowley@seas.upenn.edu")
       (smtpmail-starttls-credentials '(("smtp.gmail.com" 587 "acowley@seas.upenn.edu" nil)))
       (smtpmail-auth-credentials
        '(("smtp.gmail.com" 587 "acowley@seas.upenn.edu" nil))))
      ("sa"
       (user-mail-address "acowley@scalableautonomy.com")
       (smtpmail-default-smtp-server "mail.privateemail.com")
       (smtpmail-smtp-service 587)
       (smtpmail-stream-type starttls)
       (smtpmail-smtp-user "acowley@scalableautonomy.com")
       (smtpmail-starttls-credentials '(("mail.privateemail.com" 587 "acowley@scalableautonomy.com" nil)))
       (smtpmail-auth-credentials
        '(("mail.privateemail.com" 587 "acowley@scalableautonomy.com" nil))))))

  (defun my-ensure-list (x)
    "If the given value is a list, leave it alone. If it isn't,
cons it to nil."
    (if (listp x) x (cons x nil)))

  (defun my-first (f xs)
    "Returns the first element of the list for which the given
predicate returns true."
    (cond
     ((null xs) nil)
     ((funcall f (car xs)) (car xs))
     (t (my-first f (cdr xs)))))

  (defun my-mem-string (x xs)
    "memq using 'string-equal' for equality."
    (cond
     ((null xs) nil)
     ((string-equal x (car xs)) xs)
     (t (my-mem-string x (cdr xs)))))

  (defun my-switch-email-account (possibles &optional prompt)
    (when possibles
      (let* ((my-addresses (mapcar #'(lambda (account)
                                         (cons (car account)
                                               (cadr (assoc 'user-mail-address
                                                            (cdr account)))))
                                     my-notmuch-account-alist))
             (my-address (progn
                           (my-first #'(lambda (x)
                                         (my-mem-string (cdr x) possibles))
                                     my-addresses)))
             (account (if my-address (car my-address)
                        (when prompt
                          (completing-read
                           (format "Send with account: (%s) "
                                   (mapconcat #'(lambda (var) (car var))
                                              my-notmuch-account-alist "/"))
                           (mapcar #'(lambda (var) (car var))
                                   my-notmuch-account-alist)
                           nil t nil nil (caar my-notmuch-account-alist))))))
        (when account
          (message "Activating email settings for %s" account)
          (mapc #'(lambda (var) (set (car var) (cadr var)))
                (cdr (assoc account my-notmuch-account-alist)))))))

  (defun my-notmuch-set-reply-account ()
    "Set the account for sending a message"
    (let ((recipients
                (split-string (notmuch-show-get-to)
                              (rx (or space ?\, ?\< ?\>))
                              t)))
      (my-switch-email-account recipients t)
      (message-make-from user-full-name user-mail-address)))

  (defun my-notmuch-reply ()
"Reply-All that picks which sending account to use by looking for
a sending account which was a recipient of the email."
    (interactive)
    (notmuch-mua-reply (notmuch-show-get-message-id) (my-notmuch-set-reply-account) t))
  (defun my-notmuch-reply-sender ()
"Reply that picks which sending account to use by looking for a
sending account which was a recipient of the email."
    (interactive)
    (notmuch-mua-reply (notmuch-show-get-message-id) (my-notmuch-set-reply-account) nil))
  (advice-add #'message-make-from :before (lambda (&rest r)
                                            (my-switch-email-account
                                             (if (or (null r)) nil (cdr r)))))

  ;; (add-hook 'notmuch-mua-send-hook #'my-notmuch-set-account)
  )
;;; Email (mu4e)

;; (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
;; (add-to-list 'load-path "~/.nix-profile/share/emacs/site-lisp/mu4e")
;; (require 'mu4e)

(use-package mu4e
  :disabled
  :load-path "~/.nix-profile/share/emacs/site-lisp/mu4e"
  ; :ensure nil
  :defer t
  :commands (mu4e)
  :bind (:map mu4e-view-mode-map ("<backspace>" . mu4e-view-mark-or-move-to-trash))
  :config
  (setq
   mu4e-maildir "~/.mail"
   ;; mu4e-html2text-command  "/Users/acowley/.nix-profile/bin/w3m -T text/html"
   ;; mu4e-get-mail-command "~/.nix-profile/bin/mbsync gmail-inbox gmail-trash"
   mu4e-html2text-command "w3m -T text/html"
   mu4e-get-mail-command "mbsync gmail-inbox gmail-trash gmail-sent seas-inbox seas-trash seas-sent"

   ;; gmail folder setup
                                        ;mu4e-drafts-folder "/gmail/drafts"
   mu4e-drafts-folder "/mu4e/drafts"
   mu4e-sent-folder   "/gmail/sent"
   ;; mu4e-trash-folder  "/gmail/trash"
   mu4e-trash-folder (lambda (msg)
                       (if (string-prefix-p "/seas"
                                            (mu4e-message-field msg :maildir))
                           "/seas/trash"
                         "/gmail/trash"))

   mu4e-move-to-trash-patterns (list (rx (or "/seas" "/gmail")))

   mu4e-headers-skip-duplicates t
   mu4e-compose-dont-reply-to-self t
   mu4e-view-show-images t
   mu4e-view-scroll-to-next nil
   mu4e-update-interval 600

   ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
   ;; mu4e-sent-messages-behavior 'delete

   ;; setup some handy shortcuts
   ;; you can quickly switch to your Inbox -- press ``ji''
   ;; then, when you want archive some messages, move them to
   ;; the 'All Mail' folder by pressing ``ma''.
   mu4e-maildir-shortcuts '( ("/gmail/Inbox"   . ?i)
                             ;; ("/gmail/sent"    . ?s)
                             ("/gmail/trash"   . ?t)
                             ("/gmail/archive" . ?a)
                             (:maildir "/seas/archive" :key ?s)
                             ("/seas/Inbox"    . ?u))

   ;; something about ourselves
   user-mail-address "acowley@gmail.com"
   user-full-name  "Anthony Cowley"
   mu4e-compose-signature-auto-include nil
   mu4e-compose-signature nil
   mu4e-change-filenames-when-moving t

   ;; alternatively, for emacs-24 you can use:
   message-send-mail-function 'smtpmail-send-it
   smtpmail-stream-type 'starttls
   smtpmail-default-smtp-server "smtp.gmail.com"
   smtpmail-smtp-server "smtp.gmail.com"
   smtpmail-smtp-service 587

   ;; don't keep message buffers around
   message-kill-buffer-on-exit t
   mu4e-headers-fields
   '( (:human-date    .  12)    ;; alternatively, use :human-date
      (:flags         .   4)
      (:from          .  22)
      (:subject       .  nil)) ;; alternatively, use :thread-subject
   )
  (set-face-foreground 'mu4e-flagged-face "orange")
  (set-face-attribute 'mu4e-view-body-face nil :family "Montserrat" :weight 'light)
  (set-face-attribute 'mu4e-header-face nil :family "Victor Mono" :weight 'demi)
  (set-face-attribute 'mu4e-header-key-face nil :family "Victor Mono" :slant 'italic)
  (set-face-attribute 'mu4e-header-value-face nil :foreground "Green" :weight 'normal)

  ;; Auto-complete contact email addresses
  ;; We don't want line breaks added to emails we compose
  (defun my/mu4e-compose-hook ()
    (company-mode)
    (turn-off-auto-fill)
    ;; (variable-pitch-mode)
    (turn-on-visual-line-mode)
    ;; (setq buffer-face-mode-face (if (memq window-system '(mac ns) )
    ;;                                 '(:family "Avenir Next")
    ;;                               '(:family "Cantarell")))
    (buffer-face-mode))

  (add-hook 'mu4e-compose-mode-hook #'my/mu4e-compose-hook)

  (defun my/mu4e-headers-hook ()
    ;; The mu4e headers view slows down a lot with ligatures
    (setq auto-composition-mode nil))

  (add-hook 'mu4e-headers-mode-hook #'my/mu4e-headers-hook)

  ;; Add a view in browser action. Trigger with "aV"
  (add-to-list 'mu4e-view-actions
               '("ViewInBrowser" . mu4e-action-view-in-browser) t)

  ;; NOTE: deleting a message in Gmail is accomplished by moving to the
  ;; trash folder. "Marking for deletion" actually archives the message.
  ;; (fset 'my-move-to-trash "mt")
  ;; (define-key mu4e-headers-mode-map (kbd "d") 'my-move-to-trash)
  ;; (define-key mu4e-view-mode-map (kbd "d") 'my-move-to-trash)
  (when (fboundp 'imagemagick-register-types) (imagemagick-register-types))
                                        ;(setq mu4e-view-prefer-html t)
                                        ;(setq mu4e-html2text-command "html2text -utf8 -width 72")

  (defun my/mu4e-view-hook ()
    (setq buffer-face-mode-face (if (memq window-system '(mac ns) )
                                    '(:family "Avenir Next")
                                  '(:family "Cantarell")))
    (olivetti-mode 1)
    (buffer-face-mode 1)
    (text-scale-adjust 1))

  (add-hook 'mu4e-view-mode-hook #'my/mu4e-view-hook)

  ;; Mark email attachments in dired with C-c RET C-a
  ;; From http://www.djcbsoftware.nl/code/mu/mu4e/Attaching-files-with-dired.html
  (use-package gnus-dired
    ;; make the `gnus-dired-mail-buffers' function also work on
    ;; message-mode derived modes, such as mu4e-compose-mode
    ; :ensure nil
    :config
    (defun gnus-dired-mail-buffers ()
      "Return a list of active message buffers."
      (let (buffers)
        (save-current-buffer
          (dolist (buffer (buffer-list t))
            (set-buffer buffer)
            (when (and (derived-mode-p 'message-mode)
                       (null message-sent-message-via))
              (push (buffer-name buffer) buffers))))
        (nreverse buffers)))

    (setq gnus-dired-mail-mode 'mu4e-user-agent)
    (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode))

  ;; Automatically update every 10 minutes and pop up a notification if
  ;; the index changed.
  (defun newest-subject ()
    (let* ((mu-res (concat "(list "
                           (shell-command-to-string "mu find maildir:'/gmail/Inbox' flag:unread --format=sexp 2>/dev/null; mu find maildir:'/seas/Inbox' flag:unread --format=sexp 2>/dev/null")
                           ")"))
           (msgs (last (car (read-from-string mu-res)))))
      (mapconcat (lambda (msg)
                   (concat (caar (plist-get msg :from))
                           ": "
                           (plist-get msg :subject)))
                 msgs
                 "\n")))

  (add-hook 'mu4e-index-updated-hook
            (lambda ()
              (let ((msg (newest-subject)))
                (unless (string-equal ": " msg)

                  (if (memq window-system '(mac ns))
                      (shell-command
                       (concat "terminal-notifier -title \"mu4e\" -sender \"org.gnu.Emacs\" -message "
                               (quote-shell-string msg)))
                    (start-process "notify-send"
                                   "*notify-send*"
                                   "notify-send"
                                   "mu4e"
                                   (quote-shell-string (format "%s" msg))))))))

;;;; Additional SMTP Accounts
  ;; From http://varunbpatil.github.io/2013/08/19/eom/#.VQtWSFyCZSU
  (defvar my-mu4e-account-alist
    '(("gmail"
       (user-mail-address "acowley@gmail.com")
       (smtpmail-default-smtp-server "smtp.gmail.com")
       (smtpmail-smtp-server "smtp.gmail.com")
       (smtpmail-smtp-service 587)
       (smtpmail-stream-type starttls)
       (smtpmail-smtp-user "acowley@gmail.com")
       (smtpmail-starttls-credentials '(("smtp.gmail.com" 587 "acowley@gmail.com" nil)))
       (mu4e-sent-folder "/gmail/sent")
       (smtpmail-auth-credentials
        '(("smtp.gmail.com" 587 "acowley@gmail.com" nil)))
       ;; (smtpmail-auth-supported (login))
       )
      ("upenn"
       (user-mail-address "acowley@seas.upenn.edu")
       (smtpmail-default-smtp-server "smtp.gmail.com")
       (smtpmail-smtp-server "smtp.gmail.com")
       (smtpmail-smtp-service 587)
       (smtpmail-stream-type starttls)
       (smtpmail-smtp-user "acowley@seas.upenn.edu")
       (smtpmail-starttls-credentials '(("smtp.gmail.com" 587 "acowley@seas.upenn.edu" nil)))
       (mu4e-sent-folder "/seas/sent")
       (smtpmail-auth-credentials
        '(("smtp.gmail.com" 587 "acowley@seas.upenn.edu" nil))))
      ("sa"
       (user-mail-address "acowley@scalableautonomy.com")
       (smtpmail-default-smtp-server "mail.privateemail.com")
       (smtpmail-smtp-service 587)
       (smtpmail-stream-type starttls)
       (smtpmail-smtp-user "acowley@scalableautonomy.com")
       (smtpmail-starttls-credentials '(("mail.privateemail.com" 587 "acowley@scalableautonomy.com" nil)))
       (smtpmail-auth-credentials
        '(("mail.privateemail.com" 587 "acowley@scalableautonomy.com" nil))))

      ;; ("upenn"
      ;;  (user-mail-address "acowley@seas.upenn.edu")
      ;;  (smtpmail-default-smtp-server "smtp.seas.upenn.edu")
      ;;  (smtpmail-smtp-server "smtp.seas.upenn.edu")
      ;;                                   ;(smtpmail-smtp-service 578)
      ;;  (smtpmail-smtp-service 465)
      ;;  (smtpmail-stream-type ssl)
      ;;  (smtpmail-auth-supported (login)))
      ))

  (defun my-ensure-list (x)
    "If the given value is a list, leave it alone. If it isn't,
cons it to nil."
    (if (listp x) x (cons x nil)))

  (defun my-first (f xs)
    "Returns the first element of the list for which the given
predicate returns true."
    (cond
     ((null xs) nil)
     ((funcall f (car xs)) (car xs))
     (t (my-first f (cdr xs)))))

  (defun my-mem-string (x xs)
    "memq using 'string-equal' for equality."
    (cond
     ((null xs) nil)
     ((string-equal x (car xs)) xs)
     (t (my-mem-string x (cdr xs)))))

  (defun my-mu4e-set-account ()
    "Set the account for sending a message"
    (let*
        ((recip-account
          (when mu4e-compose-parent-message
            (let*
                ((my-addresses (mapcar #'(lambda (account)
                                           (cons (car account)
                                                 (cadr (assoc 'user-mail-address
                                                              (cdr account)))))
                                       my-mu4e-account-alist))
                 (recipients (append (my-ensure-list
                                      (plist-get mu4e-compose-parent-message :to))
                                     (plist-get mu4e-compose-parent-message :cc)))
                 (all-addresses (mapcar #'(lambda (var)
                                            (if (consp var) (cdr var) var))
                                        recipients))
                 (my-address (my-first #'(lambda (x)
                                           (my-mem-string (cdr x) all-addresses))
                                       my-addresses)))
              (when my-address (car my-address)))))
         (account
          (if recip-account
              recip-account
            (completing-read
             (format "Compose with account: (%s) "
                     (mapconcat #'(lambda (var) (car var))
                                my-mu4e-account-alist "/"))
             (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
             nil t nil nil (caar my-mu4e-account-alist))))
         (account-vars (cdr (assoc account my-mu4e-account-alist))))
      (if account-vars
          (mapc #'(lambda (var) (set (car var) (cadr var))) account-vars)
        (error "No email account found"))))

  (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)

  (setq mu4e-user-mail-address-list
        (mapcar (lambda (account) (cadr (assq 'user-mail-address account)))
                my-mu4e-account-alist))
)
;;; nerd-icons
(use-package nerd-icons)
;;; doom-modeline
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :config
  ;; Emacs 29 uses a proportional font for the mode line
  ;; See https://github.com/seagle0128/doom-modeline/issues/491
  ;; (set-face-attribute 'mode-line nil :height 110 :family "Victor Mono")
  ;; (set-face-attribute 'mode-line-inactive nil :height 110 :family "Victor Mono")
  ;; (set-face-attribute 'mode-line nil :family "Victor Mono")
  ;; (set-face-attribute 'mode-line-inactive nil :family "Victor Mono")

  ;; (unless (or (memq window-system '(mac ns))
  ;;             (file-exists-p "/etc/lsb-release"))
  ;;   ;; Shrink the mode line faces on NixOS
  ;;   (set-face-attribute 'mode-line nil :height 100)
  ;;   (set-face-attribute 'mode-line-inactive nil :height 100))

  ;; See https://github.com/seagle0128/doom-modeline/issues/486
  ;; (set-face-attribute 'mode-line nil :inherit 'default)
  ;; (set-face-attribute 'mode-line-active nil :inherit 'mode-line)
  ;; (set-face-attribute 'mode-line-inactive nil :inherit 'mode-line)

  (setq doom-modeline-buffer-encoding nil
        doom-modeline-buffer-file-name-style 'truncate-all))
;;; Multiple-cursors

;; multiple-cursors setup
(use-package multiple-cursors
  :commands (multiple-cursors-mode)
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C-<" . mc/mark-all-like-this))
  :init
  (add-hook 'prog-mode-hook #'multiple-cursors-mode)
  :config
  (setq ;mc/always-repeat-command t
        ;mc/always-run-for-all t
        mc/cmds-to-run-once '(god-mode-all))
  (defun ac/insert-numbers1 ()
    "Insert a number at each cursor counting up from 1."
    (interactive)
    (mc/insert-numbers 1)))

;;; Buffer-move

(use-package buffer-move
  :bind (("<C-S-left>" . buf-move-left)
         ("<C-S-right>" . buf-move-right)
         ("<C-S-up>" . buf-move-up)
         ("<C-S-down>" . buf-move-down)))

;; (require 'buffer-move)
;; (global-set-key (kbd "<C-S-left>") 'buf-move-left)
;; (global-set-key (kbd "<C-S-right>") 'buf-move-right)
;; (global-set-key (kbd "<C-S-up>") 'buf-move-up)
;; (global-set-key (kbd "<C-S-down>") 'buf-move-down)

;;; flycheck
(use-package flycheck
  :bind (:map flycheck-mode-map
         ("M-n" . flycheck-next-error)
         ("M-p" . flycheck-previous-error)
         ;; ("M-?" . flycheck-display-error-at-point)
         )
  :config

  ;; When there are errors at this level, skip everything of a lesser
  ;; severity. This setting is ignored when there are no errors of
  ;; this severity level.
  (setq flycheck-navigation-minimum-level 'error)
  (use-package flycheck-color-mode-line
    :commands flycheck-color-mode-line-mode
    :init
    (add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode)
    :config
    ;; (face-spec-set
    ;;  'flycheck-color-mode-line-error-face
    ;;  `((t :background
    ;;       ,(face-attribute 'flycheck-fringe-error :foreground nil 'default)))
    ;;  'face-defface-spec)
    ;; (face-spec-set
    ;;  'flycheck-color-mode-line-warning-face
    ;;  `((t :background
    ;;       ,(face-attribute 'flycheck-fringe-warning :foreground nil 'default)))
    ;;  'face-defface-spec)
    (setq flycheck-color-mode-line-face-to-color 'mode-line-buffer-id)
    ;; (setq flycheck-color-mode-line-face-to-color 'mode-line)
    )
  (setq-default mode-line-format
                (insert-after 'mode-line-position
                              'flycheck-mode-line
                              mode-line-format)))
;;; nix

(use-package nix-mode
  :mode "\\.nix\\'"
  :config
  ;; (require 'nix-update "~/src/nix-update-el/nix-update.el")
  )

(defun find-nix-shell ()
  "Search for the first shell.nix file to be found in the same directory as the current file or all ancestor directories."
  (let ((fname (or load-file-name buffer-file-name)))
    (when (not (null fname))
      (let ((dir (file-name-directory fname)))
        (while (not (or (file-exists-p (concat dir "shell.nix"))
                        (string-equal dir "/")))
          (setq dir (file-name-directory (directory-file-name dir))))
        (if (string-equal dir "/")
            (error "Couldn't find a shell.nix")
          (concat dir "shell.nix"))))))
;;; haskell

;; Using a source checkout of ghc-mod
; (add-to-list 'load-path "~/src/ghc-mod/elisp/")

(use-package haskell-mode
  :mode ("\\.\\(hs\\|lhs\\)\\'" ("cabal" . haskell-cabal-mode))
  :init
  (setq inferior-haskell-find-project-root nil
        haskell-process-type 'cabal-repl
        ;; haskell-process-args-cabal-repl '("--ghc-options=-ferror-spans -fno-ghci-sandbox")
        )
  :bind (:map haskell-mode-map
         ("C-x C-d" . nil)
         ("C-c C-z" . haskell-interactive-switch)
         ("C-c C-l" . haskell-process-load-file)
         ("C-c C-b" . haskell-interactive-switch)
         ("C-c C-n C-t" . haskell-process-do-type)
         ("C-c C-n C-i" . haskell-process-do-info)
         ("C-c C-n C-c" . haskell-process-cabal-build)
         ("C-c C-n c" . haskell-process-cabal)
         ("C-c M-." . nil)
         ("C-c C-d" . nil))
  :config
  (require 'haskell)
  (require 'haskell-hoogle)
  (setq haskell-hoogle-command "hoogle")
  ;; (electric-indent-local-mode -1)
  (use-package haskell-doc
    :commands (haskell-doc-current-info))
  (set-face-attribute 'haskell-keyword-face nil :slant 'italic)
  (use-package lsp-haskell
    ;; :defer t
    ;; :commands lsp-haskell-enable
    :custom
    ;; (lsp-haskell-formatting-provider "brittany")
    (lsp-haskell-formatting-provider "fourmolu"))

  (defun my-haskell-mode-hook ()
    ;; (structured-haskell-mode)
    ;; (electric-indent-local-mode -1)
    ;; (electric-pair-local-mode -1)
    ;; (electric-quote-local-mode -1)
    ;; (intero-global-mode)
    )
  (add-hook 'haskell-mode-hook #'my-haskell-mode-hook)
  (defun haskell-find-pragmas ()
    "Return a sorted list of Haskell language pragmas specified
in the buffer. Leaves point after the last language pragma."
    (goto-char (point-min))
    (let ((pragmas nil))
      (while (search-forward-regexp
              (rx line-start "{-#" (1+ space)
                  (or "LANGUAGE" "language")
                  (1+ space))
              (point-max) t)
        (search-forward-regexp (rx (group
                                    (zero-or-more
                                     (one-or-more alnum)
                                     (zero-or-one ?\,)
                                     (zero-or-more (or space ?\n))))
                                   "#-}")
                               (point-max)
                               t)
        (setq pragmas (append pragmas
                              (mapcar #'string-trim
                                      (split-string (match-string 1) ",")))))
      (sort pragmas #'string-lessp)))

  (defun haskell-cleanup-pragmas ()
    "Merge all GHC LANGUAGE pragmas into a single alphabetically
sorted block."
    (interactive)
    (save-excursion
      (let ((pragmas (haskell-find-pragmas)))
        (delete-char (-(1- (point))))
        (insert (fill-list pragmas ", " "{-# LANGUAGE " " #-}"))))))

;; (add-to-list 'load-path "~/.emacs.d/misc")
;; (add-to-list 'auto-mode-alist '("\\.l[gh]s\\'" . haskell-latex-mode))
;; (autoload 'haskell-latex-mode "haskell-latex")


;;; Language Server Protocol (LSP)
(use-package lsp-mode
  :defer t
  :commands lsp
  :custom
  (lsp-completion-provider :none) ;; Using corfu
  (lsp-keymap-prefix "C-c C-l")
  (lsp-configure-hook nil)
  ;; (lsp-semantic-tokens-enable t)

  ;; The default `lv-message' tends to leave stale windows down in the
  ;; minibuffer area for me.
  (lsp-signature-function #'message)
  (lsp-modeline-diagnostics-enable nil)
  (lsp-modeline-code-actions-enable nil)
  (lsp-rust-all-features t)
  (lsp-semantic-tokens-enable t)
  ;; (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-rust-analyzer-cargo-watch-command "check")
  (lsp-clients-clangd-args '("-header-insertion=never" "--header-insertion-decorators=0"))
  :bind (:map lsp-mode-map
              ("C-c C-l C-= C-=" . lsp-format-buffer)
              ("C-c C-l C-f" . lsp-format-buffer))
  :custom-face
  ;; Make the symbol-at-point highlight a bit dimmer than the default
  ;; (lsp-face-highlight-textual ((t (:background "#757500"))))
  (lsp-face-highlight-textual ((t (:background "gold4"))))
  :config
  (setq lsp-pylsp-plugins-yapf-enabled t)
  (advice-add 'lsp :before #'direnv-update-environment)
  (setq lsp-prefer-flymake nil
        ;; lsp-prefer-capf t
        read-process-output-max (* 1024 1024))
  (add-to-list 'lsp-file-watch-ignored "[/\\\\]\\.ccls-cache$")
  ;; (use-package company-lsp
  ;;   :config
  ;;   (setq company-lsp-enable-snippet t)
  ;;   (add-to-list 'company-backends 'company-lsp))
  (use-package lsp-ui
    :commands lsp-ui-mode
    :bind (:map lsp-ui-mode-map
           ("C-c C-s" . lsp-ui-sideline-toggle-symbols-info)
           ("M-." . lsp-ui-peek-find-definitions)
           ("M-?" . lsp-ui-peek-find-references)
           ("C-c C-l s a" . lsp-ui-sideline-apply-code-actions)
           ("C-c C-l C-s C-a" . lsp-ui-sideline-apply-code-actions)
           ("C-c C-l C-a" . lsp-ui-sideline-apply-code-actions)
           :map lsp-ui-peek-mode-map
           ("M-n" . lsp-ui-peek--select-next)
           ("M-p" . lsp-ui-peek--select-prev))
    :config
    (setq lsp-ui-sideline-delay 0.2
          lsp-ui-sideline-ignore-duplicate t
          ;; The child frame disappears almost immediately for me
          ;; lsp-ui-doc-use-childframe nil
          lsp-ui-doc-position 'top

          lsp-ui-doc-include-signature t

          ;; Without this, the search term is not highlighted in the
          ;; peek popup
          lsp-ui-peek-fontify 'always

          lsp-ui-doc-show-with-cursor t
          )

    (require 'lsp-semantic-tokens)

    ;; Typeset fields of structures in italic. This helps them stand
    ;; out from local variables or function parameters.
    (set-face-attribute 'lsp-face-semhl-property nil :slant 'italic)
    (set-face-attribute 'lsp-face-semhl-member nil :slant 'italic)
    ;; Make the lsp-ui-peek overlay stand out a bit better
    (set-face-background 'lsp-ui-peek-peek "dark slate gray")

    ;; Highlight the symbol we're looking for in yellow
    (set-face-foreground 'lsp-ui-peek-highlight "yellow"))
  (use-package lsp-treemacs
    :commands (lsp-treemacs-symbols
               lsp-treemacs-errors-list
               lsp-treemacs-references
               lsp-treemacs-implementations
               lsp-treemacs-call-hierarchy
               lsp-treemacs-type-hierarchy))
  (require 'lsp-diagnostics)
  (require 'lsp-completion)
  (require 'lsp-ui)
  (require 'lsp-modeline)
  (require 'lsp-headerline)
  (require 'lsp-lens)
  ;; Use cape-capf-buster for better handling of deleting characters
  ;; from a completion prefix. This invalidates the completion cache.
  (setq-local completion-at-point-functions (list (cape-capf-buster #'lsp-completion-at-point)))

  (defun my/lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless)
          ;; '(prescient)
          )
    )
  (add-hook 'lsp-completion-mode-hook #'my/lsp-mode-setup-completion)
  (add-hook 'lsp-mode-hook 'lsp-ui-mode)
  (add-hook 'lsp-mode-hook 'lsp-diagnostics-mode)
  (add-hook 'lsp-mode-hook 'lsp-completion-mode)
  (flycheck-mode)
  (yas-minor-mode)

  ;;; emacs-lsp-booster support
  ;; From https://github.com/blahgeek/emacs-lsp-booster
  (defun lsp-booster--advice-json-parse (old-fn &rest args)
    "Try to parse bytecode instead of json."
    (or
     (when (equal (following-char) ?#)
       (let ((bytecode (read (current-buffer))))
         (when (byte-code-function-p bytecode)
           (funcall bytecode))))
     (apply old-fn args)))
(advice-add (if (progn (require 'json)
                       (fboundp 'json-parse-buffer))
                'json-parse-buffer
              'json-read)
            :around
            #'lsp-booster--advice-json-parse)

  (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
    "Prepend emacs-lsp-booster command to lsp CMD."
    (let ((orig-result (funcall old-fn cmd test?)))
      (if (and (not test?)                             ;; for check lsp-server-present?
               (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
               lsp-use-plists
               (not (functionp 'json-rpc-connection))  ;; native json-rpc
               (executable-find "emacs-lsp-booster"))
          (progn
            (message "Using emacs-lsp-booster for %s!" orig-result)
            (cons "emacs-lsp-booster" orig-result))
        orig-result)))
  (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)

  ;; (helm-gtags-mode -1)
  (setq company-lsp-cache-candidates nil
        company-transformers nil
        company-lsp-async t
        lsp-enable-indentation nil)
  (flymake-mode -1)
  (defun lsp-format-defun ()
    "Reformat the current function."
    (interactive)
    (save-mark-and-excursion
      (mark-defun)
      (call-interactively 'lsp-format-region))))

;;; ccls
(use-package ccls
  :disabled t
  :defer t
  ;; :bind (:map flymake-mode-map
  ;;             ("M-n" . flymake-goto-next-error)
  ;;             ("M-p" . flymake-goto-prev-error))
  :config
  (require 'lsp-ui)
  (bind-key "C-c C-n"
            (lambda () (interactive) (ccls-navigate "D")) lsp-ui-mode-map)
  (bind-key "C-c C-p"
            (lambda () (interactive) (ccls-navigate "U")) lsp-ui-mode-map)
  (bind-key "C-c C-b"
            (lambda () (interactive) (ccls-navigate "L")) lsp-ui-mode-map)
  (bind-key "C-c C-f"
            (lambda () (interactive) (ccls-navigate "R")) lsp-ui-mode-map)

  (setq ccls-sem-highlight-method 'overlay)
  ;; (defun project-ccls ()
  ;;   (flycheck-mode)
  ;;   (yas-minor-mode)
  ;;   (helm-gtags-mode -1)
  ;;   ;; (setq ccls-extra-args '("--log-file=/tmp/cc.log"))
  ;;   (setq company-lsp-cache-candidates nil
  ;;         company-transformers nil
  ;;         company-lsp-async t)
  ;;   (setq-local ccls-executable
  ;;             (let ((nix-shell (concat
  ;;                               (locate-dominating-file (or load-file-name
  ;;                                                           buffer-file-name)
  ;;                                                       "shell.nix")
  ;;                                     "shell.nix")))
  ;;               (string-trim
  ;;                (shell-command-to-string
  ;;                 (concat
  ;;                  "nix-shell " nix-shell " --run 'which ccls'"))))))
  ;; (advice-add 'lsp-ccls-enable :before #'project-ccls)
  )

(defun lsp-ccls ()
  "Enable LSP with the CCLS backend."
  (interactive)
  (require 'ccls)
  (require 'lsp-ui-flycheck)
  (flycheck-mode)
  (yas-minor-mode)
  (helm-gtags-mode -1)
  ;(setq ccls-extra-args '("--log-file=/tmp/cc.log"))
  (when (file-exists-p "/etc/lsb-release")
    (setq ccls-executable "/home/acowley/src/ccls/Release/ccls"))
  (setq company-transformers nil
        ccls-args '("-v=3" "-log-file=/tmp/cc.log")
        lsp-enable-indentation nil)
  (lsp)
  (require 'lsp-completion)
  (lsp-completion-mode)
  (flymake-mode -1))

(defun docker-ccls ()
  (require 'lsp-mode)
  (require 'ccls)
  ;; (setq lsp-session-file "/home/acowley/.emacs.d/.lsp-session-v1")
  (lsp-register-client
   (make-lsp-client
    :new-connection (lsp-tramp-connection '("/home/acowley/src/ccls/Release/ccls" "-v=3" "-log-file=/tmp/cc.log"))
    :major-modes '(c-mode c++-mode cuda-mode)
    :remote? t
    :server-id 'rocm-ros-3.8
    :notification-handlers
    (lsp-ht ("$ccls/publishSkippedRanges" #'ccls--publish-skipped-ranges)
            ("$ccls/publishSemanticHighlight" #'ccls--publish-semantic-highlight))
    :multi-root nil
    :library-folders-fn nil
    :initialization-options (lambda () ccls-initialization-options))))

;;; cquery
;; (use-package cquery
;;   :load-path "~/Projects/emacs-cquery"
;;   :commands lsp-cquery-enable
;;   :init
;;   (setq cquery-sem-highlight-method 'overlay)
;;   ;; (setq cquery-sem-highlight-method 'font-lock)
;;   ;; (setq cquery-sem-highlight-method nil)
;;   (setq-local cquery-extra-init-params
;;               '(:indexBlacklist '("GPATH" "GRTAGS" "GTAGS")
;;                                 :cacheFormat "msgpack"))
;;   :config
;;   (setq xref-prompt-for-identifier (append xref-prompt-for-identifier '(xref-find-references))))

(defun in-docker-p ()
  "Returns a non-nil value if we are running in a docker container"
  (eq (call-process-shell-command "grep -q docker /proc/1/cgroup") 0))

;; (defun cquery-mode ()
;;   "Start all cquery-related modes"
;;   (interactive)
;;   (when (let ((ext (file-name-extension (or (buffer-file-name) ""))))
;;           (and (not (null ext))
;;                (or (string-equal ext "cpp")
;;                    (string-equal ext "cc")
;;                    (string-equal ext "hpp"))))

;;     (flycheck-mode)
;;     (lsp-cquery-enable)
;;     (yas-minor-mode)
;;     (helm-gtags-mode -1)
;;     (local-set-key (kbd "M-.") #'xref-find-definitions)))

;; (defun cquery-nix-shell ()
;;   "Find a cquery executable in a nix-shell associated with the
;; directory containig the current file if that file’s extension is
;; `cpp` or `hpp`. Use the location of that executable in the nix
;; store to load and configure the cquery lsp client."
;;   (when (let ((ext (file-name-extension (or (buffer-file-name) ""))))
;;           (and (not (null ext))
;;                (or (string-equal ext "cpp")
;;                    (string-equal ext "cc")
;;                    (string-equal ext "hpp"))))
;;     (if (in-docker-p)
;;         (progn
;;           (message "Using locally-built cquery in docker container")
;;           (setq-local cquery-executable "/home/acowley/src/cquery/docker-build/cquery"))
;;       (let ((nix-shell
;;            (concat (locate-dominating-file (or load-file-name buffer-file-name)
;;                                            "shell.nix")
;;                    "shell.nix")))
;;       (when nix-shell
;;         (let* ((exes
;;                 (split-string
;;                  (string-trim
;;                   (shell-command-to-string
;;                    (concat "nix-shell " nix-shell
;;                            " --run 'which cquery; which clang-format'")))
;;                  "\n" t))
;;                (cquery-exe (car exes))
;;                (clang-format-exe (cadr exes))
;;                (cquery-root (file-name-directory
;;                              (directory-file-name
;;                               (file-name-directory cquery-exe)))))
;;           (message "cquery-root: %s" cquery-root)
;;           ;; (require 'cquery)
;;           (setq clang-format-executable clang-format-exe)
;;           (setq-local cquery-executable cquery-exe)))) )


;;     ;; General setup

;;     ;; (setq cquery-extra-args '("--log-all-to-stderr" "--log-file" "cquery.log"))
;;     (setq cquery-extra-args '("--log-all-to-stderr"))
;;     ;; (flycheck-mode)
;;     ;; (lsp-cquery-enable)
;;     ;; (yas-minor-mode)
;;     ;; (helm-gtags-mode -1)
;;     ;; (diminish 'company-mode)
;;     ;; (diminish 'flyspell-mode)
;;     ;; (local-set-key (kbd "M-.") #'xref-find-definitions)
;;     (cquery-mode)))

;;; C++

;; I get this from melpa because the nix package ends up wanting to
;; build cmake itself.
(use-package cmake-mode
  ;; :ensure t
  :commands (cmake-mode)
  :mode "CMakeLists.txt\\'")

(use-package helm-gtags
  :defer t
  ;; :diminish helm-gtags-mode
  :commands (helm-gtags-mode)
  :bind (:map helm-gtags-mode-map
         ("M-." . helm-gtags-find-tag)
         ("M-*" . helm-gtags-pop-stack))
  :config
  (setq helm-gtags-direct-helm-completing t
        helm-gtags-auto-update t
        helm-gtags-ignore-case t))

(use-package clang-format
  :commands (clang-format-buffer clang-format-region))

;; From https://stackoverflow.com/a/21656063/277078
(defun my/merged-imenu ()
  "Use both `imenu-default-create-index-function' and `imenu-generic-expression' for generating an imenu list"
  (interactive)
  (let ((mode-imenu (imenu-default-create-index-function))
        (custom-imenu (imenu--generic-function imenu-generic-expression)))
    (append mode-imenu custom-imenu)))

(defun my/c++-mode-hook ()
  (electric-indent-mode t)
  (electric-pair-mode t)
  ;; (setq company-backends (delete 'company-dabbrev (delete 'company-clang (delete 'company-semantic company-backends))))
  (which-function-mode)
  (set-face-foreground 'which-func "LightSkyBlue")
  (yas-minor-mode-on)
  (c-toggle-auto-newline -1)

  ;; Possibly override clangd path
  (message "Checking for a CLANGD_PATH override")
  (direnv-update-environment)
  (let ((clangd-path (getenv "CLANGD_PATH")))
    (when clangd-path
      (progn
        (message "Setting explicit clangd path: %s" clangd-path)
        (setq lsp-clangd-binary-path clangd-path)
        (setq lsp-clients-clangd-executable clangd-path)
        (setq lsp-clients--clangd-default-executable clangd-path))))

  ;; Make imenu work with OpenCL, CUDA, and HIP compute kernels
  (add-to-list 'imenu-generic-expression
               `("Kernels"
                 ,(concat
                   ;"^[a-zA-Z0-9_]+[ \t]?"		; Type specs; there can be no
                   (rx (or "__global__" "__device__" "__host__" "__kernel") space)
                   "\\([a-zA-Z0-9_*]+[ \t]+\\)"	; more than 3 tokens, right?
                   "\\([a-zA-Z0-9_*]+[ \t]+\\)?"
                   "\\([*&]+[ \t]*\\)?"          ; Pointer.
                   "\\([a-zA-Z0-9_*]+\\)[ \t]*(" ; Name.
                   ) 4))
  (setq imenu-create-index-function #'my/merged-imenu)
  ;; (helm-gtags-mode 1)
  )

(add-hook 'c++-mode-hook #'my/c++-mode-hook)
(add-hook 'c-mode-hook #'my/c++-mode-hook)
(add-to-list 'auto-mode-alist '("\\.cu\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

(use-package opencl-mode 
  :mode "\\.cl\\'"
  :config
  (add-hook 'opencl-mode-hook #'electric-indent-local-mode))

;;; mixed-pitch
(use-package mixed-pitch
  :commands (mixed-pitch-mode)
  ;; :diminish mixed-pitch-mode
  :init
  ;; If you want it in all text modes:
  (add-hook 'text-mode-hook #'mixed-pitch-mode)
  (add-hook 'org-mode-hook #'mixed-pitch-mode)
  :config
  ;; Depending on your specific setup, you may want to adjust the height of
  ;; variable pitch fonts:
  (set-face-attribute 'variable-pitch nil
                      :height (cond 
                               ((memq window-system '(mac ns)) 170)
                               ((file-exists-p "/etc/nixos") 110)
                               ((file-exists-p "/etc/lsb-release") 200)
                               (t 140))
                      :family "Montserrat"
                      :weight 'normal)


  ;;(set-face-attribute 'variable-pitch nil :height 100 :family "Libre Baskerville")

  ;; Make time stamps fixed-width. This is especially helpful when
  ;; they appear in tables.
  (add-to-list 'mixed-pitch-fixed-pitch-faces 'org-date)
  )

;;; python
(defun ac/python-hook ()
  (setq python-indent-offset 4))

(add-hook 'python-mode-hook #'ac/python-hook)

;;; nxml
(use-package nxml-mode
  :mode "\\.\\(xml\\|launch\\|machine\\|chs\\)\\'"
  :config
  (defun my-nxml-hook ()
    (rng-set-vacuous-schema))
  (add-hook 'nxml-mode-hook #'my-nxml-hook))
;;; File mode associtions

;; OpenCL code uses c-mode
;; (add-to-list 'auto-mode-alist '("\\.cl\\'" . c++-mode))

(add-to-list 'auto-mode-alist '("\\.launch\\'" . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.machine\\'" . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.chs\\'" . haskell-mode))

;;; imaxima
;; imaxima installation
;; (autoload 'imaxima "imaxima" "Image support for Maxima." t)
;; (autoload 'imath-mode "imath" "Interactive Math minor mode." t)
(use-package maxima
  :load-path "~/.nix-profile/share/emacs/site-lisp"
  :mode (rx ".ma" (or ?c ?x) eos)
  :defer t
  :commands (maxima-mode imaxima maxima imath-mode)
  ;; :custom
  ;; (imaxima-latex-preamble "\usepackage{pagecolor}")
  :config
  (require 'imaxima)
  (setq imaxima-use-maxima-mode-flag t))

;;; QML mode
(use-package qml-mode
  :defer t
  :mode "\\.qml\\'")

;;; git
(add-hook 'git-commit-mode-hook 'turn-on-flyspell)
(use-package magit
  :defer t
  ;; :commands (magit-status)
  :bind (("C-x g" . magit-status))
  :config
  (add-hook 'magit-log-edit-mode-hook 'turn-on-auto-fill)
  (setq magit-last-seen-setup-instructions "1.4.0")
  (setq magit-push-always-verify nil)
  ;; Next two lines intended to speed performance with large repos from:
  ;; https://discourse.nixos.org/t/how-to-handle-nixpkgs-as-a-very-large-git-repo/24614/11?u=acowley
  (remove-hook 'magit-status-headers-hook 'magit-insert-tags-header)
  (setq magit-revision-insert-related-refs nil))



;;; gpg
(defun pinentry-emacs (desc prompt ok error)
  "Interface for entering a password into gpg-agent."
  (let ((str (read-passwd (concat (replace-regexp-in-string "%22" "\"" (replace-regexp-in-string "%0A" "\n" desc)) prompt ": "))))
    str))
;;; erc (IRC)
(use-package erc
  :defer t
  :config
  (setq erc-fill-function 'erc-fill-static
        erc-fill-static-center 18
        erc-fill-column 71)
  ;; (setq erc-fill-function 'erc-fill-variable)

  (use-package erc-terminal-notifier
    :if (memq window-system '(mac ns))
    :config
    (setq erc-terminal-notifier-command "~/.nix-profile/bin/terminal-notifier")
    (add-hook 'erc-mode-hook (lambda() (require 'erc-terminal-notifier))))
  (use-package ercn
    :if (not (memq window-system '(mac ns)))
    :config
    (require 's)
    (defun do-notify (nickname message)
      (let* ((channel (buffer-name))
             (title (if (string-match-p (concat "^" nickname) channel)
                        nickname
                      (concat nickname " (" channel ")")))
             (msg (s-trim (s-collapse-whitespace message))))
        (start-process "notify-send"
                       "*notify-send*"
                       "notify-send"
                       (concat "ERC - " title)
                       (quote-shell-string (format "%s" msg)))))
    (add-hook 'ercn-notify-hook #'do-notify))
  (use-package erc-hl-nicks
    :config
    (add-to-list 'erc-modules 'hl-nicks)))
;;; znc
(use-package znc
  :defer t
  :commands (znc-all znc-erc)
  :config
  (let ((password (let ((auth (auth-source-search :host "rasznc.local")))
                    (cond
                     ((null auth) (error "Couldn't find rasznc authinfo"))
                     (t (funcall (plist-get (car auth) :secret)))))))
    (set-variable
     'znc-servers
     `(("raspberrypi.local" 1234 t ((rasznc "acowley/libera" ,password)))
       ("irc.libera.chat" 6697 t ((libera "acowley" "foo")))))))

;;; twittering-mode
(use-package twittering-mode
  :defer t
  :commands (twittering-mode twit)
  :config
  (add-hook 'twittering-mode-hook
            (lambda ()
              (variable-pitch-mode)
              (turn-on-visual-line-mode)
              (setq buffer-face-mode-face (if (memq window-system '(mac ns))
                                              '(:family "Avenir Next")
                                            '(:family "Cantarell")))
              (buffer-face-mode)
              (text-scale-adjust 1)))
  (add-hook 'twittering-edit-mode-hook 'flyspell-mode)

  (set-variable 'twittering-use-master-password t))

;;; corral
(use-package corral
  :defer t
  :bind (("M-9" . corral-parentheses-backward)
         ("M-0" . corral-parentheses-forward)
         ("M-\"" .  corral-double-quotes-backward)
         ("M-{" . corral-braces-backward)
         ("M-}" . corral-braces-forward)
         ("M-[" . corral-brackets-backward)
         ("M-]" . corral-brackets-forward))
  :config
  (setq corral-preserve-point t))
;;; rust
(use-package rustic
  :defer t
  :mode (("\\.rs\\'" . rustic-mode))
  :config
  (defun my/rustic-hook ()
    (electric-indent-mode 1)
    (yas-minor-mode))
  (setq rustic-analyzer-command '("rust-analyzer")
        lsp-rust-analyzer-server-command '("rust-analyzer")
        lsp-rust-analyzer-proc-macro-enable t
        lsp-rust-analyzer-diagnostics-disabled ["inactive-code"]
        lsp-rust-analyzer-server-format-inlay-hints t
        lsp-inlay-hint-enable t
        ;; lsp-rust-analyzer-server-display-inlay-hints t
        lsp-ui-sideline-show-code-actions t)
  (add-hook 'rustic-mode-hook #'my/rustic-hook))

(use-package rust-mode
  :disabled
  :defer t
  :commands (rust-mode)
  :mode "\\.rs\\'"
  :config
  (setq rust-indent-offset 2)
  (use-package cargo)
  ;; (use-package flycheck-rust
  ;;   :config
  ;;   (flycheck-rust-setup))
  ;; (use-package racer
  ;;   :commands (racer-mode)
  ;;   :bind (:map rust-mode-map
  ;;          ("TAB" . company-indent-or-complete-common))
  ;;   :config
  ;;   (defun my/racer-hook ()
  ;;     (eldoc-mode)
  ;;     (company-mode)
  ;;     (setq company-tooltip-align-annotations t))
  ;;   (add-hook 'racer-mode-hook #'eldoc-mode))
  (require 'lsp-mode)
  (require 'lsp-rust)
  (setq lsp-rust-server 'rust-analyzer
        lsp-rust-analyzer-server-command '("rust-analyzer")
        lsp-rust-unstable-features t

        ;; If this feature is enabled, we get a lot of spurious
        ;; dependency crate rebuilds from both RA and cargo itself.
        ;; lsp-rust-analyzer-cargo-watch-enable nil
        )
  (defun my/rust-hook ()
    ;; (flycheck-rust-setup)
    ;; (flycheck-mode)
    ;; (racer-mode)
    )
  (add-hook 'rust-mode-hook #'my/rust-hook))

;;; purescript
(use-package purescript-mode
  :defer t
  :mode "\\.purs\\'"
  :config
  ;(use-package flycheck-purescript)
  ;; (add-hook 'purescript-mode-hook #'flycheck-mode)
  (use-package psc-ide
    :config
    (setq psc-ide-use-npm-bin t))
  (defun my/purescript-hook ()
    (psc-ide-mode)
    (company-mode t)
    (flycheck-mode t)
    (turn-on-purescript-indentation))
  (add-hook 'purescript-mode-hook #'my/purescript-hook))
;;; elisp
(use-package paredit
  :commands paredit-mode
  :bind (:map paredit-mode-map
              ("M-s" . nil)
              ("DEL" . nil))
  :init
  (add-hook 'emacs-lisp-mode-hook #'paredit-mode)
  (defun my/ielm-hook ()
    (paredit-mode 1)
    ;; Don't override ielm-return!
    ;; See: https://www.n16f.net/blog/making-ielm-more-comfortable/
    (define-key paredit-mode-map (kbd "RET") nil)
    (define-key paredit-mode-map (kbd "C-j") 'paredit-newline))
  (add-hook 'ielm-mode-hook #'my/ielm-hook)
  ;; (add-hook 'ielm-mode-hook #'paredit-mode)
  )

;;; PlatformIO
;; From github user @pashky
(add-hook 'projectile-mode-hook
          (lambda ()
            (projectile-register-project-type 'platformio '("platformio.ini")
                                              :compile "platformio run"
                                              :run "platformio run -t upload")))

;;; yaml
(use-package yaml-mode
  :defer t
  :mode "\\.yaml\\'"
  :config
  ;; From https://github.com/yoshiki/yaml-mode/issues/25#issuecomment-250440342
  (add-hook 'yaml-mode-hook
            (lambda ()
              (outline-minor-mode)
              ;; (define-key yaml-mode-map (kbd "TAB") 'outline-toggle-children)
              (define-key yaml-mode-map (kbd "TAB") 'yaml-indent-line)
              ;(setq outline-regexp "^ *\\([A-Za-z0-9_-]*: *[>|]?$\\|-\\b\\)")
              )))
;;; dictionary
(use-package osx-dictionary
  :if (memq window-system '(mac ns))
  :bind (("C-c d" . osx-dictionary-search-pointer))
  :config
  (setq osx-dictionary-dictionary-choice '("Dictionary" "Thesaurus")))

;;;; dict
(use-package dict-lookup
  :if (not (memq window-system '(mac ns)))
  :load-path "~/Projects/dict-lookup"
  :bind (("C-c d" . dict-lookup-search-pointer))
  ;; :custom (dict-lookup-dictionary "dict-db-wordnet-542")
  )

;;; graphviz-dot-mode
(use-package graphviz-dot-mode
  :defer t
  :mode "\\.dot\\'")
;;; direnv
(use-package direnv
  :config
  (setq direnv-always-show-summary nil)
  (direnv-mode 1))
;;; dired-du
(use-package dired-du
  :commands (dired-du-mode))
;;; dired-narrow
(use-package dired-narrow
  ;; Suggested setting from
  ;; https://pragmaticemacs.wordpress.com/2016/03/01/dynamically-filter-directory-listing-with-dired-narrow/
  :after dired
  :commands (dired-narrow)
  :bind (:map dired-mode-map
              ("/" . dired-narrow)))
;;; diredfl
;; Config for this and dired-git-info from
;; https://xenodium.com/showhide-emacs-dired-details-in-style/
;; (use-package dired
;;   :hook (dired-mode . dired-hide-details-mode)
;;   :config
;;   ;; More colorful text
;;   (use-package diredfl
;;     :config
;;     (diredfl-global-mode 1)))
;;; dired-git-info
(use-package dired-git-info
  :commands (dired-git-info-mode)
  :bind (:map dired-mode-map
              (")" . dired-git-info-mode)))
;;; nix-buffer
(use-package nix-buffer
  :defer t
  :commands (nix-buffer))
;;; toml
(use-package toml-mode
  :defer t
  :mode "\\.toml\\'")
;;; markdown-mode
(use-package markdown-mode :defer t
  :mode "\\.md\\'"
  :config
  (set-face-attribute 'markdown-code-face nil :family "Victor Mono"))
;;; web-mode
(use-package web-mode
  :mode "\\.html\\'"
  :commands (web-mode)
  :config
  (setq web-mode-markup-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-css-indent-offset 2))
;;; glsl
(use-package glsl-mode
  :mode "\\.\\(vert\\|frag\\|geom\\|comp\\)\\'")
;;; wgsl
(use-package wgsl-mode
  :load-path "~/Projects/wgsl-mode"
  :mode "\\.wgsl\\'")
;;; smartparens-mode
(use-package smartparens
  :defer t
  :config
  (require 'smartparens-config))

;;; logview
(use-package logview
  :defer t
  :commands (logview-mode)
  :config
  (setq datetime-timezone 'UTC
        logview-additional-level-mappings '(("ICP"
                                             (error       "ERROR")
                                             (warning     "WARNING")
                                             (information "INFO")
                                             (debug       "DEBUG")
                                             (trace       "TRACE")))
        logview-additional-timestamp-formats '(("easyloggingpp" (java-pattern . "HH:mm:ss,SSS")))
        logview-additional-submodes '(("ICP" . ((format . "TIMESTAMP LEVEL ")
                                                (levels . "ICP")
                                                (timestamp . ("easyloggingpp")))))))
;;; ag
(use-package ag :defer t)
;;; ripgrep
(use-package ripgrep :defer t)
;;; xterm-color
(use-package xterm-color
  :commands xterm-color-filter
  :init
  (setq comint-output-filter-functions
        (remove 'ansi-color-process-output comint-output-filter-functions))
  (add-hook 'shell-mode-hook
            (lambda ()
              (add-hook 'comint-preoutput-filter-functions
                        'xterm-color-filter nil t))))

;;; highlight-indent-guides
(use-package highlight-indent-guides
  :defer t
  :commands highlight-indent-guides-mode
  :config
  (setq highlight-indent-guides-method 'character))
;;; emacs-libvterm
(use-package vterm
  :defer t
  :commands (vterm vterm-other-window)
  :bind (:map vterm-mode-map
              ("<escape>" . nil)
              ("M-w" . nil)
              ;; ("C-y" . nil)
              ("C-n" . nil)
              ("C-p" . nil)
              ;;;("C-a" . nil)
              ("C-e" . nil)
              ;; ("C-f" . nil)
              ;; ("C-b" . nil)
              ;; ("M-b" . nil)
              ;; ("M-f" . nil)
              ("C-f" . #'vterm-send-right)
              ("M-f" . #'vterm-send-M-f)
              ("C-b" . #'vterm-send-left)
              ("M-b" . #'vterm-send-M-b)
              ("C-SPC" . nil)
              ("M->" . nil)
              ("M-s" . nil))
  :config
  (setq vterm-kill-buffer-on-exit t)

  ;; From https://github.com/akermu/emacs-libvterm/blob/master/README.md
  (defun vterm-counsel-yank-pop-action (orig-fun &rest args)
    (if (equal major-mode 'vterm-mode)
        (let ((inhibit-read-only t)
              (yank-undo-function (lambda (_start _end) (vterm-undo))))
          (cl-letf (((symbol-function 'insert-for-yank)
                     (lambda (str) (vterm-send-string str t))))
            (apply orig-fun args)))
      (apply orig-fun args)))

  (advice-add 'counsel-yank-pop-action :around #'vterm-counsel-yank-pop-action)
  (advice-add 'consult-yank-from-kill-ring :around #'vterm-counsel-yank-pop-action))
;;; dhall-mode
(use-package dhall-mode
  :defer t
  :mode "\\.dhall\\'"
  :commands (dhall-mode))
;;; plantuml
(use-package plantuml-mode
  :defer t
  :mode (rx ".plantuml" eos)
  :commands (plantuml-mode))
;;; ESS (R)
(use-package ess-site :mode (("\\.[rR]\\'" . R-mode))
  :commands R
  :config
  (setq ess-indent-offset 2)
  (setq-local ess-indent-offset 2))
;;; docker
;; (use-package docker :defer t)
(use-package dockerfile-mode
  :defer t
  :mode "\\Dockerfile\\'")

;;; emojify
(use-package emojify
  :defer t
  :commands (emojify-mode global-emojify-mode)
  :config
  (emojify-set-emoji-styles '(;; github
                              unicode)))
;;; disk-usage
(use-package disk-usage
  :defer t
  :commands (disk-usage disk-usage-here disk-usage-dired-at-point))

;;; speed-type
(use-package speed-type :commands (speed-type-text))
;;; pomidor
(use-package pomidor
  :bind (("<f12>" . pomidor))
  :config (setq pomidor-sound-tick nil
                pomidor-sound-tack nil)
  :hook (pomidor-mode . (lambda ()
                          (display-line-numbers-mode -1)
                          (setq left-fringe-width 0 right-fringe-width 0)
                          (setq left-margin-width 2 right-margin-width 0)
                          (set-window-buffer nil (current-buffer)))))
;;; synosaurus
(use-package synosaurus
  :commands (synosaurus-mode
             synosaurus-lookup
             synosaurus-choose-and-replace
             synosaurus-choose-and-insert)
  :config
  (require 'synosaurus-wordnet)
  (setq synosaurus-backend #'synosaurus-backend-wordnet))
;;; ace-window
(use-package ace-window
  :defer t
  :bind (("M-o" . ace-window))
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
;;; avy
(use-package avy
  :bind (("M-s" . avy-goto-word-1)
         ("M-S" . avy-goto-char-2)))
;;; proofgeneral
;; (use-package proof-general
;;   :mode (rx ".v" eos))
;;; literate-calc-mode
(use-package literate-calc-mode
  :commands (literate-calc-mode literate-calc-minor-mode)
  :config
  ; From https://www.reddit.com/r/emacs/comments/gn8bzo/literatecalcmode/fr9pf01?utm_source=share&utm_medium=web2x
  (with-eval-after-load 'calc
    (defalias 'calcFunc-uconv 'math-convert-units)
    (defalias 'calcFunc-usimp 'math-simplify-units)
    (defalias 'calcFunc-norm 'calc-abs)))
;;; dired-rsync
(use-package dired-rsync
  :commands (dired-rsync)
  :hook (dired-mode . (lambda () (bind-key "C-c C-r" #'dired-rsync dired-mode-map)))

  ;; The below ends up not getting triggered until we explicitly
  ;; execute the `dired-rsync' command. I think this is because of how
  ;; dired-mode is loaded. The hook above gets things going.
  ; :bind (:map dired-mode-map
  ;             ("C-c C-r" . dired-rsync))
  )
;;; restclient
(use-package restclient
  :commands (restclient-mode))

;;; auctex
(use-package auctex
  :mode (("\\.tex\\'" . TeX-latex-mode))
  :init (add-hook 'LaTeX-mode-hook (lambda ()
                                     (require 'auctex-latexmk)
                                     (auctex-latexmk-setup)))
  :custom
  (TeX-engine 'xetex)
  (TeX-parse-self t)
  (TeX-auto-save t)
  (reftex-default-bibliography '("~/Documents/MyPapers/mybib/mybib.bib")))
;;; gif-screencast
(use-package gif-screencast
  :commands (gif-screencast))
;;; deft
(use-package deft
  :commands deft
  :config
  (setq deft-extensions '("org")
        deft-directory "~/org"
        deft-recursive t
        deft-org-mode-title-prefix t

        ;; The large home.org file significantly slows down deft
        deft-ignore-file-regexp (rx (or "home.org"))
        deft-strip-summary-regexp (rx (or (seq bol (* space) eol)
                                          ;; (or ?\n ?\t)
                                          (seq bol ":" (* upper) ":" (* any) eol)
                                          (seq "[id:" (* (or alnum ?\-)) ?\])
                                          (seq bol "#+" (* (or alnum ?\_)) ":" (* any) eol)
                                          (seq bol "# -*-" (* any) eol)))
        deft-use-filename-as-title nil))
;;; octave
(use-package octave
  :commands (octave-mode)
  :config
  (setq octave-comment-char ?%
        octave-comment-start "%"
        octave-block-comment-start "% "))

;;; clip2org
(use-package clip2org
  :commands (clip2org)
  :config
  (setq clip2org-clippings-file "~/Documents/My Clippings.txt"))

(use-package lean4-mode
  :mode "\\.lean\\'")

;;; Private Configuration
;; Set up paths for org files, etc.
(when (file-exists-p "~/.emacsPrivate.el")
  (load "~/.emacsPrivate.el"))

;;; Mode-line cleanup
;; (setq mode-line-position
;;       '((line-number-mode ("%l" (column-number-mode ":%2c")))))

;; (setq-default mode-line-format
;;       (cl-reduce #'cl-remove
;;                  (list 'mode-line-front-space
;;                        'mode-line-mule-info
;;                        'mode-line-client
;;                        'mode-line-remote
;;                        'mode-line-frame-identification)
;;                  :initial-value mode-line-format
;;                  :from-end t))

;;; ediff
(use-package ediff
  :custom-face
  (ediff-current-diff-A ((t :background "dark red")))
  (ediff-fine-diff-A ((t :background "indian red")))
  (ediff-current-diff-B ((t (:background "dark goldenrod"))))
  (ediff-fine-diff-B ((t (:background "sienna"))))
  :commands (ediff ediff3))
;;; flyspell-correct
(use-package flyspell-correct
  :after flyspell
  :bind (:map flyspell-mode-map
              ("C-;" . flyspell-correct-wrapper)
              ("C-," . flyspell-correct-previous)))
;;; nim-mode
(use-package nim-mode
  :mode "\\.nim\\'"
  :commands (nim-mode))
;;; bazel
(use-package bazel
  :mode (("BUILD\\'" . bazel-build-mode)
         ("BUILD\\.bazel\\'" . bazel-build-mode)
         ("WORKSPACE" . bazel-workspace-mode)
         ("\\.bzl\\'" . bazel-starlark-mode)
         ("\\.bazelrc" . bazelrc-mode)))
;;; ledger
(use-package ledger-mode
  :mode "\\.ledger\\'")
;;; typescript
(use-package typescript-mode
  :mode "\\.ts\\'")
;;; protobuf
(use-package protobuf-mode
  :mode "\\.proto\\'")
;;; gnuplot
(use-package gnuplot
  :commands (gnuplot-mode)
  :mode "\\.gnuplot\\'")
;;; zig
(use-package zig-mode
  :mode "\\.zig\\'")
;;; expand-region
(use-package expand-region
  :bind ("C-=" . er/expand-region))
;;; package-lint
(use-package package-lint
  :commands (package-lint-buffer))
;;; unison-mode
(use-package unisonlang-mode
  :mode "\\.u\\'"
  :config
  (require 'lsp-mode)
  (add-to-list 'lsp-language-id-configuration '("\\.u\\'" . "unisonlang"))
  (setq-local lsp-tcp-connection-timeout 10)
  (lsp-register-client
   (make-lsp-client
    :language-id "unisonlang"
    :new-connection
    (list
     :connect (lambda (filter sentinel name _environment-fn _workspace)
                (let* ((host "localhost")
                       (port 5757)
                       (tcp-proc (lsp--open-network-stream host port (concat name "::tcp"))))

                  (set-process-query-on-exit-flag tcp-proc nil)
                  (set-process-filter tcp-proc filter)
                  (set-process-sentinel tcp-proc sentinel)
                  (cons tcp-proc tcp-proc)))
     :test? (lambda () t))
    :major-modes '(unisonlang-mode)
    :server-id 'unisonlang
    ;; :initialization-options (lambda () ccls-initialization-options)
    ))
)
;;; xeft
(use-package xeft
  :commands (xeft)
  :config
  (setq xeft-directory "~/org"
        xeft-recursive t
        xeft-ignore-extension '("pdf" "png" "iimg")))
;;; editorconfig
(use-package editorconfig
  ;; This is used in nixpkgs
  :commands (editorconfig-mode))
;;; pyvenv
(use-package pyvenv
  :commands (pyvenv-mode))
;;; surround
(use-package surround
  :defer nil
  :after god-mode
  :bind-keymap ("C-c s" . surround-keymap)
  :config
  (require 'surround)
  (bind-key "C-c s" surround-keymap god-local-mode-map))
;;; password-store
(use-package password-store
  :commands
  password-store-edit
  password-store-get
  password-store-get-field
  password-store-url
  password-store-clear
  password-store-rename
  password-store-insert
  password-store-generate
  password-store-generate-no-symbols
  password-store-copy
  password-store-copy-field)
(use-package password-store-otp
  :commands
  password-store-otp-token-copy
  password-store-otp-uri-copy
  password-store-otp-insert
  password-store-otp-append
  password-store-otp-append-from-image)
;;; kagi
(use-package kagi
  :commands
  kagi-fastgpt-shell
  kagi-summarize-buffer
  kagi-summarize-region
  kagi-summarize-url
  :custom
  (kagi-api-token (lambda () (password-store-get "kagi-api")))
  (kagi-summarizer-engine "cecil")
  (kagi-summarize-default-language "EN")
  (kagi-summarize-cache nil))
;;; org-present
(use-package org-present
  :commands
  org-present
  org-present-narrow)
;;; visual-fill-column
(use-package visual-fill-column
  :commands (visual-fill-column-mode visual-line-mode)
  ;; Based on https://systemcrafters.net/emacs-tips/presentations-with-org-present/
  :init
  (defun my/org-present-start ()
    (visual-fill-column-mode 1))
  (defun my/org-present-end ()
    (visual-fill-column-mode 0))
  :hook ((org-present-mode . my/org-present-start)
         (org-present-mode-quit . my/org-present-end))
  :config
  (setq visual-fill-column-width 110
        visual-fill-column-center-text t))
;;; easy-kill
(use-package easy-kill
  :config
  ;; This enables
  ;; M-w w: save word at point
  ;; M-w s: save sexp at point
  ;; M-w l: save list at point (enclosing sexp)
  ;; M-w d: save defun at point
  ;; M-w D: save current defun name
  ;; M-w f: save file at point
  ;; M-w b: save buffer-file-name or default-directory. - changes the kill to the directory name, + to full name and 0 to basename.
  (global-set-key [remap kill-ring-save] 'easy-kill))
;;; pikchr-mode
(use-package pikchr-mode
  :mode ("\\.pikchr\\'" . pikchr-mode)
  :commands (pikchr-mode org-babel-execute:pikchr))
;;; casual
(use-package casual
  :after calc
  :commands (casual-main-menu)
  :bind (:map calc-mode-map ("C-o" . casual-main-menu)))
;;; macro-slides
(use-package macro-slides
  :commands (ms-start)
  ;; :custom (ms-breadcrumb-separator " ⊢ ")
  :custom (ms-breadcrumb-separator " ⮑ "))
(use-package master-of-ceremonies
  :after macro-slides
  :commands (mc-live-present-mode mc-present-mode)
  :config
  (defun my/macro-slides-start-hook ()
    (mc-hide-markup-mode))
  (defun my/macro-slides-narrow-hook ()
    (mc-hide-refresh))
  (add-hook 'ms-start-hook #'my/macro-slides-start-hook)
  (add-hook 'ms-narrow-hook #'my/macro-slides-narrow-hook))
;;; Customize
(setq custom-file "~/.emacs.d/custom.el")
(when (file-exists-p custom-file)
  (load custom-file))
;;; File Local Variables
;; Local Variables:
;; mode: emacs-lisp
;; eval: (outline-minor-mode)
;; eval: (outshine-mode)
;; eval: (outshine-cycle-buffer)
;; End:
